<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Play</title>
  <icon>https://www.gravatar.com/avatar/37f5042e32043c8bcdfe0a7b75ed5267</icon>
  <subtitle>Codes&#39; Playground</subtitle>
  <link href="https://kallenblue.github.io/atom.xml" rel="self"/>
  
  <link href="https://kallenblue.github.io/"/>
  <updated>2022-10-14T15:19:09.839Z</updated>
  <id>https://kallenblue.github.io/</id>
  
  <author>
    <name>南懿烨曦</name>
    <email>869083577@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务-Nacos</title>
    <link href="https://kallenblue.github.io/2022/10/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Nacos/"/>
    <id>https://kallenblue.github.io/2022/10/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Nacos/</id>
    <published>2022-10-14T09:16:21.000Z</published>
    <updated>2022-10-14T15:19:09.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nacos安装指南"><a href="#Nacos安装指南" class="headerlink" title="Nacos安装指南"></a>Nacos安装指南</h1><h2 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h2><p>开发阶段采用单机安装即可。</p><h3 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h3><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/75804e9a-76b8-42d4-911e-733fa48ac570.png" alt="image-20210402161102887"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/50c23cae-a096-412a-9af8-3b2c0ac0fdfa.png" alt="image-20210402161130261"></p><p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p><h3 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h3><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/3b1886ca-470e-47cb-a193-dae5ad063fee.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h3 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h3><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/121512b7-8fb2-431e-ab02-a348ca4adc56.png" alt="image-20210402162008280"></p><p>修改其中的内容：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/cd17c06a-cc4e-4e50-afe6-0d2063e52f5d.png" alt="image-20210402162251093"></p><h3 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h3><p>启动非常简单，进入bin目录，结构如下：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/8fd9af97-7b53-41fd-b3ee-438af9121e82.png" alt="image-20210402162350977"></p><blockquote><p>1.4.4nacos默认要求是使用集群的方式启动，集群要求至少有三台nacos服务器,所以需要修改配置</p></blockquote><p>将set MODE=”cluster”修改为set MODE=”standalone”，再次双击startup.cmd启动即可<br><img src="https://img-blog.csdnimg.cn/e6c2e0a5f2f64e14906a2cfd92841841.png"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/f8783315-b0b0-4462-870b-de885025d58e.png" alt="image-20210402162526774"></p><h3 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h3><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos">http://127.0.0.1:8848/nacos</a> 即可：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/3facf74a-4506-4b39-a4cb-bda3308add4d.png" alt="image-20210402162630427"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/2ec50808-43df-4093-8e21-e82762d0296c.png" alt="image-20210402162709515"></p><h2 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h2><p>Linux或者Mac安装方式与Windows类似。</p><h3 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1.安装JDK"></a>2.1.安装JDK</h3><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p><p>上传jdk安装包：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/1211a2fd-f76b-46c9-8a6e-32e8e3cd9fd6.png" alt="image-20210402172334810"></p><p>上传到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>然后重命名为java</p><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h3><p>如图：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/26be463c-78c0-441f-b280-351e815330a6.png" alt="image-20210402161102887"></p><p>也可以直接使用tar.gz：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/50c23cae-a096-412a-9af8-3b2c0ac0fdfa.png" alt="image-20210402161130261"></p><p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/e16526ca-acc2-474b-bf8c-95a5a77719e8.png" alt="image-20210402163715580"></p><h3 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h3><p>命令解压缩安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>然后删除安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>目录中最终样式：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/38a47218-766a-4da6-addc-8ab2b9bb59a4.png" alt="image-20210402163858429"></p><p>目录内部：</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/84643c32-9809-41f7-9699-bb1058019660.png" alt="image-20210402164414827"></p><h3 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h3><p>与windows中类似</p><h3 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h3><p>在nacos/bin目录中，输入命令启动Nacos：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><h1 id="Nacos注册使用"><a href="#Nacos注册使用" class="headerlink" title="Nacos注册使用"></a>Nacos注册使用</h1><h2 id="Nacos的依赖"><a href="#Nacos的依赖" class="headerlink" title="Nacos的依赖"></a>Nacos的依赖</h2><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos的管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置地址信息"><a href="#配置地址信息" class="headerlink" title="配置地址信息"></a>配置地址信息</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br></pre></td></tr></table></figure><h1 id="Nacos服务多级存储模型"><a href="#Nacos服务多级存储模型" class="headerlink" title="Nacos服务多级存储模型"></a>Nacos服务多级存储模型</h1><h2 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h2><p><img src="https://img-blog.csdnimg.cn/57ad4c30b4a14ebca648a338bb1123eb.png"></p><h2 id="服务跨集群调用问题"><a href="#服务跨集群调用问题" class="headerlink" title="服务跨集群调用问题"></a>服务跨集群调用问题</h2><p><img src="https://img-blog.csdnimg.cn/ab3561fa71224c74813ea03bc653b424.png"></p><h2 id="模拟集群"><a href="#模拟集群" class="headerlink" title="模拟集群"></a>模拟集群</h2><p>在属性配置中加上集群的配置即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">#集群名称，代指杭州</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/42f57b7cb792429ebec140bb45110f8f.png"></p><h1 id="NacosRule负载均衡"><a href="#NacosRule负载均衡" class="headerlink" title="NacosRule负载均衡"></a>NacosRule负载均衡</h1><p>NacosRule负载均衡策略</p><ul><li>优先选择同集群服务实例列表</li><li>本地集群找不到提供者，才去其它集群寻找，并且会报警告<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10-14 23:15:11:759  WARN 25900 --- [nio-8082-exec-5] c.alibaba.cloud.nacos.ribbon.NacosRule   : A cross-cluster call occurs，name = userservice, clusterName = BJ, instance = [Instance&#123;instanceId=&#x27;192.168.137.1#8085#SH#DEFAULT_GROUP@@userservice&#x27;, ip=&#x27;192.168.137.1&#x27;, port=8085, weight=1.0, healthy=true, enabled=true, ephemeral=true, clusterName=&#x27;SH&#x27;, serviceName=&#x27;DEFAULT_GROUP@@userservice&#x27;, metadata=&#123;preserved.register.source=SPRING_CLOUD&#125;&#125;]</span><br></pre></td></tr></table></figure></li><li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ul><blockquote><p>设置负载均衡的配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span>  <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nacos安装指南&quot;&gt;&lt;a href=&quot;#Nacos安装指南&quot; class=&quot;headerlink&quot; title=&quot;Nacos安装指南&quot;&gt;&lt;/a&gt;Nacos安装指南&lt;/h1&gt;&lt;h2 id=&quot;1-Windows安装&quot;&gt;&lt;a href=&quot;#1-Windows安装&quot; c</summary>
      
    
    
    
    <category term="微服务" scheme="https://kallenblue.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>微服务-Eureka</title>
    <link href="https://kallenblue.github.io/2022/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Eureka/"/>
    <id>https://kallenblue.github.io/2022/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Eureka/</id>
    <published>2022-10-13T12:52:00.000Z</published>
    <updated>2022-10-14T14:51:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka作用"><a href="#Eureka作用" class="headerlink" title="Eureka作用"></a>Eureka作用</h1><ul><li>向消费者提供服务提供者具体信息<ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul></li></ul><ul><li>帮助消费者选择服务提供者<ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个合适的服务提供者</li></ul></li><li>干着服务提供者健康状态<ul><li>服务提供者每隔30秒想EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被删除</li><li>消费者可以拉取到最新的信息</li></ul></li></ul><h1 id="搭建EurekaServer"><a href="#搭建EurekaServer" class="headerlink" title="搭建EurekaServer"></a>搭建EurekaServer</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在启动类中添加-EnableEurekaServer注解"><a href="#在启动类中添加-EnableEurekaServer注解" class="headerlink" title="在启动类中添加@EnableEurekaServer注解"></a>在启动类中添加@EnableEurekaServer注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment"># eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h1 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h1><p>服务注册和eureka的注册相同，引入依赖，编写好配置信息即可</p><ul><li>引入依赖<br>这里为客户端依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userserver</span> <span class="comment"># eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h2 id="idea模拟多实例部署"><a href="#idea模拟多实例部署" class="headerlink" title="idea模拟多实例部署"></a>idea模拟多实例部署</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/c4cb11a1-38c8-4f59-b88b-1d465304a7d5.png"></p><blockquote><p>启动情况如下<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/80d68b7a-be16-49a5-b165-ec4e3bf2ab8a.png"></p></blockquote><h1 id="完成服务拉取"><a href="#完成服务拉取" class="headerlink" title="完成服务拉取"></a>完成服务拉取</h1><ul><li>修改访问url路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span>+order.getUserId();</span><br></pre></td></tr></table></figure><ul><li>在RestTemplate的bean中加上负载均衡的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负载均衡流程"><a href="#负载均衡流程" class="headerlink" title="负载均衡流程"></a>负载均衡流程</h1><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/dcf45685-e05d-4382-9130-a442cd15f708.png"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/48459266-b109-498d-9abf-f35da7ed90a7.png"></p><h1 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h1><blockquote><p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个实现类都是一种规则<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/02b76ed4-71dc-456c-b361-8986ed84aacc.png"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/2fe159f3-590f-4630-98b0-22bace140501.png"></p></blockquote><h2 id="修改负载均衡策略"><a href="#修改负载均衡策略" class="headerlink" title="修改负载均衡策略"></a>修改负载均衡策略</h2><p>介绍两种方式</p><ul><li>1.在启动类中定义一个新的IRule的bean<br>这种方式是全局配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>2.在yml配置文件中添加配置<br>这种方式只针对某一个微服务<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRul</span>  <span class="comment"># 负载均衡规则</span></span><br></pre></td></tr></table></figure><h2 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h2>Ribbon默认采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间较长。<br>而饥饿加载会在项目启动时创建，降低第一次访问的耗时<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="comment"># 指定饥饿加载的服务名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eureka作用&quot;&gt;&lt;a href=&quot;#Eureka作用&quot; class=&quot;headerlink&quot; title=&quot;Eureka作用&quot;&gt;&lt;/a&gt;Eureka作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;向消费者提供服务提供者具体信息&lt;ul&gt;
&lt;li&gt;服务提供者启动时向eureka注</summary>
      
    
    
    
    <category term="微服务" scheme="https://kallenblue.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>微服务-Spring框架中发起http请求</title>
    <link href="https://kallenblue.github.io/2022/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/"/>
    <id>https://kallenblue.github.io/2022/10/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%8F%91%E8%B5%B7http%E8%AF%B7%E6%B1%82/</id>
    <published>2022-10-13T09:30:16.000Z</published>
    <updated>2022-10-13T12:31:13.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在启动类中注册RestTemplate"><a href="#在启动类中注册RestTemplate" class="headerlink" title="在启动类中注册RestTemplate"></a>在启动类中注册RestTemplate</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>直接使用restTemplate.getForObject()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2.查询用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8083/user/&quot;</span>+order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 3.封装User信息</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在启动类中注册RestTemplate&quot;&gt;&lt;a href=&quot;#在启动类中注册RestTemplate&quot; class=&quot;headerlink&quot; title=&quot;在启动类中注册RestTemplate&quot;&gt;&lt;/a&gt;在启动类中注册RestTemplate&lt;/h1&gt;&lt;figu</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot原理-启动过程</title>
    <link href="https://kallenblue.github.io/2022/10/12/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://kallenblue.github.io/2022/10/12/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2022-10-12T12:16:09.000Z</published>
    <updated>2022-10-13T01:36:25.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动过程思想"><a href="#启动过程思想" class="headerlink" title="启动过程思想"></a>启动过程思想</h1><ul><li>初始化各种属性，加载成对象<ul><li>读取环境属性</li><li>系统配置</li><li>参数</li></ul></li><li>床架Spring容器对象ApplicationContext，加载各种配置</li><li>在容器创建前，通过监听器机制，应对不同阶段加载数据，更新数据的要求</li><li>容器初始化过程中追加各种功能，例如统计时间、输出日志等</li></ul><h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p>按照源代码的流程一步步往下深挖</p><ul><li>SpringBootStartupApplication[10] -&gt; SpringApplication.run(SpringBootStartupApplication.class, args)<ul><li>SpringApplication[817] -&gt; return run(new Class[]{primarySource}, args);<ul><li>SpringApplication[821] -&gt; return (new SpringApplication(primarySources)).run(args);<ul><li>SpringApplication[821] -&gt; SpringApplication(primarySources)<blockquote><p>加载各种配置信息，初始化各种配置对象</p></blockquote><ul><li>SpringApplication[98] -&gt; this((ResourceLoader)null, primarySources);<ul><li>SpringApplication[102-121] -&gt; public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;… primarySources)<ul><li>this.resourceLoader = resourceLoader;<blockquote><p>扩大应用范围</p></blockquote></li><li>this.primarySources = new LinkedHashSet(Arrays.asList(primarySources));<blockquote><p>初始化配置类的类名信息(格式转换)</p></blockquote></li><li>this.webApplicationType = WebApplicationType.deduceFromClasspath();<blockquote><p>确认当前容器加载的类型</p></blockquote></li><li>this.bootstrapRegistryInitializers = new ArrayList(this.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<blockquote><p>获取系统配置引导信息</p></blockquote></li><li>this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));<blockquote><p>获取ApplicationContextInitializer.class对应的实例</p></blockquote></li><li>this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));<blockquote><p>初始化监听器，对初始化过程及运行过程进行干预</p></blockquote></li><li>this.mainApplicationClass = this.deduceMainApplicationClass();<blockquote><p>初始化了引导类类名信息，备用</p></blockquote></li></ul></li></ul></li><li>SpringApplication[821] -&gt; (new SpringApplication(primarySources)).run(args);<blockquote><p>初始化容器</p></blockquote><ul><li>long startTime = System.nanoTime();<blockquote><p>设置计时器 </p></blockquote></li><li>DefaultBootstrapContext bootstrapContext = this.createBootstrapContext();<blockquote><p>系统引导信息对应的上下文对象 </p></blockquote></li><li> ConfigurableApplicationContext context = null;</li><li>this.configureHeadlessProperty();<blockquote><p> 模拟输入输出信号，避免出现因缺少外设导致的信号传输失败，进而引发错误(模拟显示器，键盘，鼠标等) </p></blockquote></li><li>SpringApplicationRunListeners listeners = this.getRunListeners(args);<blockquote><p>获取当前注册的所有监听器 </p></blockquote></li><li>listeners.starting(bootstrapContext, this.mainApplicationClass);<blockquote><p>监听器执行了对应的操作步骤 </p></blockquote></li><li>ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);<blockquote><p>获取参数 </p></blockquote></li><li>ConfigurableEnvironment environment = this.prepareEnvironment(listeners, bootstrapContext, applicationArguments);<blockquote><p>将前期读取的数据加载成了一个环境对象，用来描述信息  </p></blockquote></li><li>this.configureIgnoreBeanInfo(environment);<blockquote><p>做了一个配置，备用  </p></blockquote></li><li>Banner printedBanner = this.printBanner(environment);<blockquote><p>初始化logo </p></blockquote></li><li>context = this.createApplicationContext();<blockquote><p>创建容器对象，根据前期配置的容器类型进行判定并创建 </p></blockquote></li><li>context.setApplicationStartup(this.applicationStartup);<blockquote><p>设置启动模式  </p></blockquote></li><li>this.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<blockquote><p> 对容器进行设置，参数来源于前期的设定 </p></blockquote></li><li>this.refreshContext(context);<blockquote><p>刷新容器环境 </p></blockquote></li><li>this.afterRefresh(context, applicationArguments);<blockquote><p>刷新完毕后做后处理  </p></blockquote></li><li>Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);<blockquote><p>计时结束点  </p></blockquote></li><li>if (this.logStartupInfo) {<blockquote><p>判定是否记录启动时间的日志  </p></blockquote></li><li>(new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), timeTakenToStartup);<blockquote><p>创建日志对应的对象，输出日志信息，包含启动时间  </p></blockquote></li><li>listeners.started(context, timeTakenToStartup);<blockquote><p>监听器执行了对应的操作步骤   </p></blockquote></li><li> this.callRunners(context, applicationArguments);</li><li>Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);<blockquote><p>计时结束点  </p></blockquote></li><li>listeners.ready(context, timeTakenToReady);<blockquote><p>监听器执行了对应的操作步骤   </p></blockquote></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;启动过程思想&quot;&gt;&lt;a href=&quot;#启动过程思想&quot; class=&quot;headerlink&quot; title=&quot;启动过程思想&quot;&gt;&lt;/a&gt;启动过程思想&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;初始化各种属性，加载成对象&lt;ul&gt;
&lt;li&gt;读取环境属性&lt;/li&gt;
&lt;li&gt;系统配置&lt;/li&gt;
</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot原理-自定义Starter</title>
    <link href="https://kallenblue.github.io/2022/10/10/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E8%87%AA%E5%AE%9A%E4%B9%89Starter/"/>
    <id>https://kallenblue.github.io/2022/10/10/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E8%87%AA%E5%AE%9A%E4%B9%89Starter/</id>
    <published>2022-10-10T10:25:10.000Z</published>
    <updated>2022-10-12T07:35:54.744Z</updated>
    
    <content type="html"><![CDATA[<p>在SpringBoot中我们需要引入一项新的技术或者功能，往往只是在pom中引入相应的坐标这样简单就完成了，那么现在我们先尝试一下自定义一个starter模块，然后再使用一下</p><h1 id="模块功能"><a href="#模块功能" class="headerlink" title="模块功能"></a>模块功能</h1><p>在web应用中加入一个访问检测器，每当有用户访问网页时，后台打印出其ip地址和访问次数</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ul><li>需要一个web依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建一个新的模块，实现一个业务类，具体功能如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpCount</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String,Integer&gt; ipCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span> (ipCountMap.containsKey(ipAddress))&#123;</span><br><span class="line">      ipCountMap.put(ipAddress,ipCountMap.get(ipAddress)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ipCountMap.put(ipAddress,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;ipAddress:&quot;</span>+ipAddress+<span class="string">&quot;count:&quot;</span>+ipCountMap.get(ipAddress));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br></pre></td></tr></table></figure><p>HttpServletRequest的bean由使用这个模块的项目提供</p><ul><li>创建一个自动配置类，并初始化刚刚创建的业务类的bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> IpCount <span class="title function_">ipCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCount</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在resources下创建META-INF/spring.factories文件，将自动装配信息填入<br>这样就会自动配置IpAutoConfiguration类的bean，同时启动它所依赖的所有bean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  cn.ipcount.autoconfig.IpAutoConfiguration</span><br></pre></td></tr></table></figure><p>写好之后用maven上传到本地的库中<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/4a55c039-e118-4441-8940-9efe143f7660.png"></p></li><li><p>在需要使用的项目中引入这个依赖即可</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.ipcount<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ipcount_spring_boot_starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>现在就可以将其当做一个普通的第三方包使用了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  IpCount ipCount;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAccount</span><span class="params">()</span>&#123;</span><br><span class="line">    ipCount.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;get...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h1><p>现在我们需要能够自定义属性，在使用时没有配置属性就用默认属性，配置了属性就使用配置的属性</p><ul><li>创建一个配置类<br>这里仅仅设置一个简易的属性note，默认为”检测到用户访问”<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ipcount&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpProperties</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">note</span> <span class="operator">=</span> <span class="string">&quot;检测到用户访问&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getNote</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> note;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNote</span><span class="params">(String note)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.note = note;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在自动装配类中启用配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(IpProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> IpCount <span class="title function_">ipCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCount</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单修改一下业务类中的方法，直接让其打印出note</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpCount</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String,Integer&gt; ipCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IpProperties ipProperties;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ipAddress</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span> (ipCountMap.containsKey(ipAddress))&#123;</span><br><span class="line">      ipCountMap.put(ipAddress,ipCountMap.get(ipAddress)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ipCountMap.put(ipAddress,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(ipProperties.getNote());</span><br><span class="line">    System.out.println(<span class="string">&quot;ipAddress:&quot;</span>+ipAddress+<span class="string">&quot;count:&quot;</span>+ipCountMap.get(ipAddress));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果没有配置属性，程序会在运行时打印默认的参数，如果在项目中配置了这个属性，那么则会打印配置的值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ipcount:</span></span><br><span class="line">  <span class="attr">note:</span> <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">ipAddress:[0:0:0:0:0:0:0:1]count:1</span><br><span class="line">get...</span><br></pre></td></tr></table></figure><h1 id="加一个拦截器"><a href="#加一个拦截器" class="headerlink" title="加一个拦截器"></a>加一个拦截器</h1><p>这个模块目前只能在一个account-get请求里面使用，我们希望在所有资源请求都使用这个功能，于是想到了使用拦截器，当然也可以使用AOP，但是这是一个web应用，优先考虑拦截器。关于拦截器的知识也在之前的文章中已经解释过</p><ul><li>自定义拦截器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IpCount ipCount;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">      <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ipCount.count();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置核心配置类，加载拦截器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> IpInterceptor <span class="title function_">interceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpInterceptor</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(interceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在IpAutoConfiguration中引入SpringMvcConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(IpProperties.class)</span></span><br><span class="line"><span class="meta">@Import(SpringMvcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> IpCount <span class="title function_">ipCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpCount</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开启配置提示功能"><a href="#开启配置提示功能" class="headerlink" title="开启配置提示功能"></a>开启配置提示功能</h1><p>目前设计的starter在配置上面没有提示功能，如果拿给别人用的话别人也搞不明白你这些配置到底是干嘛用的，所以一般会加上提示功能</p><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖后重新打包项目，项目中会出现target/classes/META-INF/spring-configuration-metadata.json这个文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipcount&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.ipcount.properties.IpProperties&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.ipcount.properties.IpProperties&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipcount.note&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.ipcount.properties.IpProperties&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;收到用户访问&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hints&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>把这个文件移动到项目中的resources/META-INF文件夹中，然后把上面引入的依赖去掉，否则会出现两种提示，实际上自己来编写这个spring-configuration-metadata.json文件也是可以的，只是依赖生成可以省去书写的过程</p><ul><li>hints提示可以选择的值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hints&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipcount.note&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提示1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提示的一种模式.&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提示2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提示的另一种模式.&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>最后效果如下<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/fce7c0be-a5ba-4c23-af66-1ead91863512.png"><br>ok，这样一来我们就成功定义了一个相对完整的starter，进一步了解了SpringBoot的自动装配机制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在SpringBoot中我们需要引入一项新的技术或者功能，往往只是在pom中引入相应的坐标这样简单就完成了，那么现在我们先尝试一下自定义一个starter模块，然后再使用一下&lt;/p&gt;
&lt;h1 id=&quot;模块功能&quot;&gt;&lt;a href=&quot;#模块功能&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot原理-自动装配</title>
    <link href="https://kallenblue.github.io/2022/10/09/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>https://kallenblue.github.io/2022/10/09/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</id>
    <published>2022-10-09T11:53:33.000Z</published>
    <updated>2022-10-10T09:18:55.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bean的加载控制"><a href="#bean的加载控制" class="headerlink" title="bean的加载控制"></a>bean的加载控制</h1><p>springboot最常使用的控制bean加载的注解为@Condition<strong>，即在</strong>情况下加载bean<br>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = &quot;com.kallen.springbootlearning.bean.Mouse&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;com.kallen.springbootlearning.bean.Dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bean的依赖属性配置"><a href="#bean的依赖属性配置" class="headerlink" title="bean的依赖属性配置"></a>bean的依赖属性配置</h1><p>用一个简单的案例模拟springboot的属性配置</p><ul><li>将业务功能bean运行需要的资源抽取成独立的属性类（***Properties），设置读取配置文件信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;cartoon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartoonProperties</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Cat cat;</span><br><span class="line">  <span class="keyword">private</span> Mouse mouse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置的属性如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cartoon:</span></span><br><span class="line">  <span class="attr">cat:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;coco&quot;</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">mouse:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;tutu&quot;</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li>业务类如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CartoonProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomAndJerry</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Cat cat;</span><br><span class="line">  <span class="keyword">private</span> Mouse mouse;</span><br><span class="line">  <span class="keyword">private</span> CartoonProperties cartoonProperties;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TomAndJerry</span><span class="params">(CartoonProperties cartoonProperties)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.cartoonProperties = cartoonProperties;</span><br><span class="line">    cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    cat.setName(cartoonProperties.getCat()!=<span class="literal">null</span> &amp;&amp; StringUtils.hasText(cartoonProperties.getCat().getName())?cartoonProperties.getCat().getName():<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    cat.setAge(cartoonProperties.getCat()!=<span class="literal">null</span>&amp;&amp;cartoonProperties.getCat().getAge()!=<span class="literal">null</span>?cartoonProperties.getCat().getAge():<span class="number">3</span>);</span><br><span class="line">    mouse = <span class="keyword">new</span> <span class="title class_">Mouse</span>();</span><br><span class="line">    mouse.setName(cartoonProperties.getMouse()!=<span class="literal">null</span> &amp;&amp; StringUtils.hasText(cartoonProperties.getMouse().getName())?cartoonProperties.getMouse().getName():<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    mouse.setAge(cartoonProperties.getMouse()!=<span class="literal">null</span>&amp;&amp;cartoonProperties.getMouse().getAge()!=<span class="literal">null</span>?cartoonProperties.getMouse().getAge():<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(cat.getAge()+<span class="string">&quot;岁的&quot;</span>+cat.getName()+<span class="string">&quot;在抓&quot;</span>+ mouse.getAge()+<span class="string">&quot;岁的&quot;</span>+ mouse.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，@EnableConfigurationProperties(CartoonProperties.class)和配置类联系在了一起，只有在业务类启用时才会去加载配置类</p><ul><li>实体类如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果在配置文件中配置了Cat和Mouse的属性，那么配置的属性就会覆盖默认值，没有配置也不影响，程序会按照默认配置运行。并且只有使用了业务类，程序才会去加载与业务类相关的一系列的bean</p><h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><h2 id="自动装配思想"><a href="#自动装配思想" class="headerlink" title="自动装配思想"></a>自动装配思想</h2><ul><li>1.收集整理常用的技术列表-&gt;(技术集A)</li><li>2.收集常用技术列表中的使用参数-&gt;(设置集B)</li><li>3.初始化基础环境，加载自定义的bean并导入其他坐标</li><li>4.将技术集A中的所有技术都定义出来，在Spring/SpringBoot启动时默认全部加载</li><li>5.将技术集A设置成按条件加载，由开发者决定是否使用该技术</li><li>6.将设置集B作为默认配置加载(<strong>约定大于配置</strong>),减少配置的工作量</li><li>7.开放设置集B的配置覆盖接口，由开发者根据自身需要决定是否覆盖默认配置</li></ul><h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><p>很好奇，启动springboot项目只需要启动一个Application类下带有@SpringBootApplication注解的main方法即可，于是我们重点来看这个@SpringBootApplication注解<br>逐一点开可以看到它的层级如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">  <span class="meta">@SpringBootConfiguration</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">      <span class="meta">@Component</span></span><br><span class="line">    <span class="comment">//运行期加速启动</span></span><br><span class="line">    <span class="meta">@Indexed</span></span><br><span class="line">  <span class="meta">@EnableAutoConfiguration</span></span><br><span class="line">    <span class="meta">@AutoConfigurationPackage</span></span><br><span class="line">      <span class="comment">//设置当前配置所在包作为扫描包，后续要针对当前的包进行包扫描</span></span><br><span class="line">      <span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line">    <span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line">  <span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br></pre></td></tr></table></figure><p>下面进行一一解释，但不会完全解释，只是简述一下各部分的功能，有些重点的地方会展开解释</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>顶层配置</p><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>标记为配置类，封装了@Configuration，并做了一些加强</p><h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><h6 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h6><h5 id="Indexed"><a href="#Indexed" class="headerlink" title="@Indexed"></a>@Indexed</h5><p>运行期加速启动</p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>自动配置的主要实现方式</p><h5 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h5><p>设置当前配置所在包作为扫描包，后续要针对当前的包进行包扫描</p><h6 id="Import-AutoConfigurationPackages-Registrar-class"><a href="#Import-AutoConfigurationPackages-Registrar-class" class="headerlink" title="@Import(AutoConfigurationPackages.Registrar.class)"></a>@Import(AutoConfigurationPackages.Registrar.class)</h6><p>查看Registrar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Registrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames()</span><br></pre></td></tr></table></figure><p>则是获取启动器所在的包的报名<br>查看这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(BeanDefinitionRegistry registry, String... packageNames)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line"><span class="type">BasePackagesBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> (BasePackagesBeanDefinition) registry.getBeanDefinition(BEAN);</span><br><span class="line">beanDefinition.addBasePackages(packageNames);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">registry.registerBeanDefinition(BEAN, <span class="keyword">new</span> <span class="title class_">BasePackagesBeanDefinition</span>(packageNames));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.registerBeanDefinition(BEAN, <span class="keyword">new</span> <span class="title class_">BasePackagesBeanDefinition</span>(packageNames));</span><br></pre></td></tr></table></figure><p>则是注册这个启动器的bean，为后续扫路径下的包做准备</p><h5 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h5><p>这个选择器是用来选择项目所需要的资源，加载初始集<br>查看AutoConfigurationImportSelector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware,</span><br><span class="line">ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered</span><br></pre></td></tr></table></figure><p>这个类继承了很多接口，分为三类：以Aware结尾的接口可以获取各个类型的bean及其信息(BeanClassLoaderAware,ResourceLoaderAware, BeanFactoryAware, EnvironmentAware)，Ordered用来规定bean的加载顺序，DeferredImportSelector为延时加载选择器<br>AutoConfigurationImportSelector类通过DeferredImportSelector接口实现了process方法，加载资源主要就源自这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;</span><br><span class="line">Assert.state(deferredImportSelector <span class="keyword">instanceof</span> AutoConfigurationImportSelector,</span><br><span class="line">() -&gt; String.format(<span class="string">&quot;Only %s implementations are supported, got %s&quot;</span>,</span><br><span class="line">AutoConfigurationImportSelector.class.getSimpleName(),</span><br><span class="line">deferredImportSelector.getClass().getName()));</span><br><span class="line"><span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line"><span class="built_in">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line"><span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line"><span class="built_in">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">    .getAutoConfigurationEntry(annotationMetadata);</span><br></pre></td></tr></table></figure><p>中的getAutoConfigurationEntry方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//排除不需要的资源</span></span><br><span class="line"><span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure><p>就是获得所有的技术集，继续查看getCandidateConfigurations方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span><br><span class="line">ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">+ <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看其中的SpringFactoriesLoader.loadFactoryNames()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoaderToUse</span> <span class="operator">=</span> classLoader;</span><br><span class="line"><span class="keyword">if</span> (classLoaderToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> factoryType.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的loadSpringFactories()方法就是最终获取技术集的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; result = cache.get(classLoader);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line"><span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> ((String) entry.getKey()).trim();</span><br><span class="line">String[] factoryImplementationNames =</span><br><span class="line">StringUtils.commaDelimitedListToStringArray((String) entry.getValue());</span><br><span class="line"><span class="keyword">for</span> (String factoryImplementationName : factoryImplementationNames) &#123;</span><br><span class="line">result.computeIfAbsent(factoryTypeName, key -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">.add(factoryImplementationName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace all lists with unmodifiable lists containing unique elements</span></span><br><span class="line">result.replaceAll((factoryType, implementations) -&gt; implementations.stream().distinct()</span><br><span class="line">.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)));</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的classLoader.getResources(FACTORIES_RESOURCE_LOCATION);<br>FACTORIES_RESOURCE_LOCATION的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORIES_RESOURCE_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br></pre></td></tr></table></figure><p>而这个文件中就保存了所有的技术集<br>而至于技术集是否应用则是通过是否有引入来决定了，在注解中使用@Conditional**来实现</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>这一部分主要就是用来过滤一些不需要的东西</p><h2 id="自定义自动配置"><a href="#自定义自动配置" class="headerlink" title="自定义自动配置"></a>自定义自动配置</h2><p>在resources包下新建META-INF/spring.factories文件，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.kallen.springbootlearning.bean.TomAndJerry</span><br></pre></td></tr></table></figure><p>将需要配置的包写在下面即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bean的加载控制&quot;&gt;&lt;a href=&quot;#bean的加载控制&quot; class=&quot;headerlink&quot; title=&quot;bean的加载控制&quot;&gt;&lt;/a&gt;bean的加载控制&lt;/h1&gt;&lt;p&gt;springboot最常使用的控制bean加载的注解为@Condition&lt;stro</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot原理篇-Bean加载方式</title>
    <link href="https://kallenblue.github.io/2022/10/09/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87-Bean%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/"/>
    <id>https://kallenblue.github.io/2022/10/09/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E5%8E%9F%E7%90%86%E7%AF%87-Bean%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/</id>
    <published>2022-10-08T16:38:43.000Z</published>
    <updated>2022-10-09T04:59:44.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-XML方式声明bean"><a href="#1-XML方式声明bean" class="headerlink" title="1.XML方式声明bean"></a>1.XML方式声明bean</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--声明自定义bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.Service&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--声明第三方开发bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-XML-注解方式声明bean"><a href="#2-XML-注解方式声明bean" class="headerlink" title="2.XML+注解方式声明bean"></a>2.XML+注解方式声明bean</h1><ul><li>此种方式需要在xml配置文件中声明命名空间<br>开启命名空间后，指定包扫描位置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.Learning2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>然后使用@Component注解以及其衍生注解@Controller，@Service，@Repository定义bean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果要定义第三方bean，需要使用@Bean注解定义在方法上面，并将所在类定义为配置类或Bean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbConfig</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DruidDataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>@Configuration注解包含了@Component注解</li></ul><h1 id="3-纯注解加载Bean"><a href="#3-纯注解加载Bean" class="headerlink" title="3.纯注解加载Bean"></a>3.纯注解加载Bean</h1><p>将xml配置文件改为一个配置类，用配置类取代xml配置的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Learning2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于FactoryBean接口的类"><a href="#关于FactoryBean接口的类" class="headerlink" title="关于FactoryBean接口的类"></a>关于FactoryBean接口的类</h2><p>实现FactoryBean接口的类也是用来创建bean的，它存在的意义就在于能够在bean创建之前进行一系列的前置工作，比如判断创建条件，设置bean的信息等<br>对实现了FactoryBean接口的类加上@Bean注解，创建出来的bean不是那个类而是工厂造出来的对象的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;TestDao&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> TestDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestDaoImpl</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    <span class="keyword">return</span> TestDao.class;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-Configuration注解中的proxyBeanMethods属性"><a href="#关于-Configuration注解中的proxyBeanMethods属性" class="headerlink" title="关于@Configuration注解中的proxyBeanMethods属性"></a>关于@Configuration注解中的proxyBeanMethods属性</h2><p>proxyBeanMethods=true可以保证调用有@Configuration注解的类的方法得到的对象是从spring容器中获取的而不是重新创建的。proxyBeanMethods的默认值是true</p><h1 id="4-使用-Import注解导入"><a href="#4-使用-Import注解导入" class="headerlink" title="4.使用@Import注解导入"></a>4.使用@Import注解导入</h1><p>将需要其对象注册为Bean的类作为参数填入@Import注解中即可<br>这种形式可以有效的降低源代码与spring技术的耦合度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-使用上下文对象在容器初始化完毕后注入bean"><a href="#5-使用上下文对象在容器初始化完毕后注入bean" class="headerlink" title="5.使用上下文对象在容器初始化完毕后注入bean"></a>5.使用上下文对象在容器初始化完毕后注入bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    applicationContext.register(UserService.class);</span><br><span class="line">    applicationContext.registerBean(<span class="string">&quot;testDao&quot;</span>,TestDao.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-通过ImportSelector接口加载bean"><a href="#6-通过ImportSelector接口加载bean" class="headerlink" title="6.通过ImportSelector接口加载bean"></a>6.通过ImportSelector接口加载bean</h1><p>在配置类中导入实现了ImportSelector接口的类，实现对导入源的编程式处理<br>谁引用了这个类，这个类就可以获取这个类的一系列信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyImportSelector.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">    importingClassMetadata.hasAnnotation(<span class="string">&quot;org.springframework.context.annotation.Configuration&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;com.Learning2.Dog&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-通过ImportBeanDefinitionRegistrar接口创建bean"><a href="#7-通过ImportBeanDefinitionRegistrar接口创建bean" class="headerlink" title="7.通过ImportBeanDefinitionRegistrar接口创建bean"></a>7.通过ImportBeanDefinitionRegistrar接口创建bean</h1><p>这种方法深入到bean的定义过程，使用方法和上一种类似<br>导入实现了ImportBeanDefinitionRegistrar接口的类，通过beanDefinition的注册器注册实名bean，实现对容器中bean的裁定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span><br><span class="line"><span class="params">      BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">                                    .rootBeanDefinition(Dog.class)</span><br><span class="line">                                    .getBeanDefinition();</span><br><span class="line">    registry.registerBeanDefinition(<span class="string">&quot;dodo&quot;</span>,beanDefinition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-BeanDefinitionRegistryPostProcessor决定bean的创建"><a href="#8-BeanDefinitionRegistryPostProcessor决定bean的创建" class="headerlink" title="8.BeanDefinitionRegistryPostProcessor决定bean的创建"></a>8.BeanDefinitionRegistryPostProcessor决定bean的创建</h1><p>这个接口是bean创建的最终决定接口，实现了这个接口的类可以处理之前过程中已经创建的bean，也可以新增bean，是一个最终裁定的接口<br>使用方式和上一个接口的方式类似<br>导入实现了BeanDefinitionRegistryPostProcessor接口的类，通过BeanDefinition的注册器注册实名bean，实现对容器中bean的最终裁定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyPostProcessor.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry beanDefinitionRegistry)</span></span><br><span class="line">      <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder</span><br><span class="line">        .rootBeanDefinition(Dog.class)</span><br><span class="line">        .getBeanDefinition();</span><br><span class="line">    beanDefinitionRegistry.registerBeanDefinition(<span class="string">&quot;dodo&quot;</span>,beanDefinition);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(</span></span><br><span class="line"><span class="params">      ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面8种方式spring还有一些其他的加载bean的方式，这里就不再叙述了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-XML方式声明bean&quot;&gt;&lt;a href=&quot;#1-XML方式声明bean&quot; class=&quot;headerlink&quot; title=&quot;1.XML方式声明bean&quot;&gt;&lt;/a&gt;1.XML方式声明bean&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://kallenblue.github.io/2022/10/07/MybatisPlus/MybatisPlus/"/>
    <id>https://kallenblue.github.io/2022/10/07/MybatisPlus/MybatisPlus/</id>
    <published>2022-10-07T12:43:20.173Z</published>
    <updated>2022-10-08T08:33:05.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>MybatisPlus(MP)是基于Mybatis框架基础上开发的增强型工具，旨在简化开发、提高效率<br>关于Springboot整合MP已经在之前的文章中提到过，不再解释<h1 id="标准数据层CRUD功能"><a href="#标准数据层CRUD功能" class="headerlink" title="标准数据层CRUD功能"></a>标准数据层CRUD功能</h1><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/e89fb90f-d525-45a8-a643-ef6f06b2b1ed.png"></li></ul><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>分页查询需要配置一个分页拦截器作为spring管理的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">pageInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectPage</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">  accountDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;当前页码:&quot;</span>+page.getCurrent());</span><br><span class="line">  System.out.println(<span class="string">&quot;每页数据总量:&quot;</span>+page.getSize());</span><br><span class="line">  System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">  System.out.println(<span class="string">&quot;数据总量:&quot;</span>+page.getTotal());</span><br><span class="line">  System.out.println(<span class="string">&quot;当前页数据:&quot;</span>+page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以开启日志查看查询过程<br>在配置文件中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>日志结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6bee793f] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@32bb0072] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT COUNT(*) AS total FROM account</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: total</span><br><span class="line">&lt;==        Row: 2</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">==&gt;  Preparing: SELECT account_name,property,account_id FROM account LIMIT ?</span><br><span class="line">==&gt; Parameters: 2(Long)</span><br><span class="line">&lt;==    Columns: account_name, property, account_id</span><br><span class="line">&lt;==        Row: kallen5, 500.0, 1</span><br><span class="line">&lt;==        Row: kallen, 1650.0, 2</span><br><span class="line">&lt;==      Total: 2</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6bee793f]</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h3 id="常规格式"><a href="#常规格式" class="headerlink" title="常规格式"></a>常规格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySelect</span><span class="params">()</span>&#123;</span><br><span class="line">  QueryWrapper&lt;Account&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  queryWrapper.lt(<span class="string">&quot;property&quot;</span>,<span class="number">3000</span>);</span><br><span class="line">  queryWrapper.gt(<span class="string">&quot;property&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">  List&lt;Account&gt; accounts = accountDao.selectList(queryWrapper);</span><br><span class="line">  System.out.println(accounts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.lt(<span class="string">&quot;property&quot;</span>,<span class="number">3000</span>);</span><br><span class="line">queryWrapper.gt(<span class="string">&quot;property&quot;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>可以简化为链式格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.lt(<span class="string">&quot;property&quot;</span>,<span class="number">3000</span>).gt(<span class="string">&quot;property&quot;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这是”与”查询，”或”查询加个or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.lt(<span class="string">&quot;property&quot;</span>,<span class="number">1000</span>).or().gt(<span class="string">&quot;property&quot;</span>,<span class="number">1500</span>);</span><br></pre></td></tr></table></figure><h3 id="lambda格式"><a href="#lambda格式" class="headerlink" title="lambda格式"></a>lambda格式</h3><p>lambda格式不会有误写字段的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySelect</span><span class="params">()</span> &#123;</span><br><span class="line">  LambdaQueryWrapper&lt;Account&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">  lambdaQueryWrapper.lt(Account::getProperty, <span class="number">3000</span>).gt(Account::getProperty, <span class="number">1000</span>);</span><br><span class="line">  List&lt;Account&gt; accounts = accountDao.selectList(lambdaQueryWrapper);</span><br><span class="line">  System.out.println(accounts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空值判定"><a href="#空值判定" class="headerlink" title="空值判定"></a>空值判定</h3><p>在实际运用中，条件查询的值都是变化的，不会设置为一个固定的值，所以也会存在为null的情况，这时就要规定，查询值为null就不让其生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.lt(<span class="literal">null</span> != account.getPages,<span class="string">&quot;property&quot;</span>,account.getProperty)</span><br></pre></td></tr></table></figure><h1 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h1><p>规定需要查询的字段和设置字段别名<br>lambda形式不能设置字段别名</p><blockquote><p>lambda格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Account&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">lambdaQueryWrapper.select(Account::getAccountId,Account::getAccountName);</span><br><span class="line">List&lt;Account&gt; accounts = accountDao.selectList(lambdaQueryWrapper);</span><br><span class="line">System.out.println(accounts);</span><br></pre></td></tr></table></figure><blockquote><p>普通格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;Account&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.groupBy(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = accountDao.selectMaps(queryWrapper);</span><br><span class="line">System.out.println(maps);</span><br></pre></td></tr></table></figure><h1 id="字段映射与表名映射"><a href="#字段映射与表名映射" class="headerlink" title="字段映射与表名映射"></a>字段映射与表名映射</h1><p>专门针对实体类和数据库设计名称不对应而生的</p><blockquote><p>属性与字段不同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TableField(value = &quot;account_name&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性为类中特有属性，在数据表中不存在</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="meta">@TableField(exist = false)</span></span><br><span class="line">  <span class="keyword">private</span> Integer online;</span><br><span class="line">&#125;</span><br><span class="line">&gt;设置属性是否参与查询</span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="meta">@TableField(select = false)</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数据库表名和类名不对应</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;tbl_account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><p>在秒杀等业务中需要进行加锁，mp实现了一个轻量级的加锁策略，version策略，在某一个进程修改数据时会检查它的version并且在操作成功后使version+1，使在未修改数据时同时拿到version的进程只有一个进程可以操作数据<br>下面介绍使用方法</p><h2 id="在数据库表中添加锁标记字段"><a href="#在数据库表中添加锁标记字段" class="headerlink" title="在数据库表中添加锁标记字段"></a>在数据库表中添加锁标记字段</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/ec3d9373-64e5-419d-96df-91f9d63f1eb6.png"></p><h2 id="实体类中添加对应字段，并设定当前字段为逻辑删除标记字段"><a href="#实体类中添加对应字段，并设定当前字段为逻辑删除标记字段" class="headerlink" title="实体类中添加对应字段，并设定当前字段为逻辑删除标记字段"></a>实体类中添加对应字段，并设定当前字段为逻辑删除标记字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">  <span class="meta">@Version</span></span><br><span class="line">  <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置乐观锁拦截器实现锁机制对应的动态sql语句拼装"><a href="#配置乐观锁拦截器实现锁机制对应的动态sql语句拼装" class="headerlink" title="配置乐观锁拦截器实现锁机制对应的动态sql语句拼装"></a>配置乐观锁拦截器实现锁机制对应的动态sql语句拼装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">pageInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用乐观锁机制在修改之前必须先获取到对应数据的version方可正常进行"><a href="#使用乐观锁机制在修改之前必须先获取到对应数据的version方可正常进行" class="headerlink" title="使用乐观锁机制在修改之前必须先获取到对应数据的version方可正常进行"></a>使用乐观锁机制在修改之前必须先获取到对应数据的version方可正常进行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySelect</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountDao.selectById(<span class="number">1L</span>);</span><br><span class="line">  account.setName(<span class="string">&quot;kallen&quot;</span>);</span><br><span class="line">  accountDao.updateById(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><p>这是一个超级懒人使用的方法，直接生成所有的开发模块，比如domain，service等，下面介绍使用方法</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用用例"><a href="#使用用例" class="headerlink" title="使用用例"></a>使用用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建代码生成器对象，执行生成代码操作</span></span><br><span class="line">    <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">    <span class="comment">//数据源相关配置，读取数据库中的信息，根据数据库表结构生成代码</span></span><br><span class="line">    <span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">    dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration&quot;</span>);</span><br><span class="line">    dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSourceConfig.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置全局配置</span></span><br><span class="line">    <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">    <span class="comment">//设置生成的文件位置</span></span><br><span class="line">    globalConfig.setOutputDir(System.getProperty(<span class="string">&quot;user.dir&quot;</span>)+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">    <span class="comment">//是否打开文件夹</span></span><br><span class="line">    globalConfig.setOpen(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//设置作者名</span></span><br><span class="line">    globalConfig.setAuthor(<span class="string">&quot;kallen&quot;</span>);</span><br><span class="line">    <span class="comment">//设置是否覆盖原文件</span></span><br><span class="line">    globalConfig.setFileOverride(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置以Dao结尾</span></span><br><span class="line">    globalConfig.setMapperName(<span class="string">&quot;%sDao&quot;</span>);</span><br><span class="line">    <span class="comment">//设置数据库id创建方式</span></span><br><span class="line">    globalConfig.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">    autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包相关配置</span></span><br><span class="line">    <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">    <span class="comment">//设置包位置</span></span><br><span class="line">    packageConfig.setParent(<span class="string">&quot;com.kallen.springbootlearning&quot;</span>);</span><br><span class="line">    <span class="comment">//设置实体类别名</span></span><br><span class="line">    packageConfig.setEntity(<span class="string">&quot;domain&quot;</span>);</span><br><span class="line">    <span class="comment">//设置数据层别名</span></span><br><span class="line">    packageConfig.setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">    autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//策略相关配置</span></span><br><span class="line">    <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">    <span class="comment">//设置需要生成的表</span></span><br><span class="line">    strategyConfig.setInclude(<span class="string">&quot;account&quot;</span>);</span><br><span class="line">    <span class="comment">//设置数据库表前缀</span></span><br><span class="line">    strategyConfig.setTablePrefix(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//设置rest风格</span></span><br><span class="line">    strategyConfig.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置lombok</span></span><br><span class="line">    strategyConfig.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//设置逻辑删除</span></span><br><span class="line">    strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">    <span class="comment">//设置乐观锁</span></span><br><span class="line">    strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">    autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">    autoGenerator.execute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于lombok"><a href="#关于lombok" class="headerlink" title="关于lombok"></a>关于lombok</h1><blockquote><p>一个java类库，提供了一组注解，简化pojo实体类开发</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实体类上加上@Data即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String accountName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> property;</span><br><span class="line">  <span class="keyword">private</span> Long accountId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为当前实体类再编译期设置对应的get/set方法，无参/有参构造方法，toString方法，hashCode方法，equals方法等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MybatisPlus(MP)是基于Mybatis框架基础上开发的增强型工具，旨在简化开发、提高效率&lt;br&gt;关于Springbo</summary>
      
    
    
    
    <category term="MybatisPlus" scheme="https://kallenblue.github.io/categories/MybatisPlus/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot-基础操作</title>
    <link href="https://kallenblue.github.io/2022/10/06/SpringBoot/SpringBoot-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://kallenblue.github.io/2022/10/06/SpringBoot/SpringBoot-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2022-10-06T05:47:13.000Z</published>
    <updated>2022-10-08T08:28:26.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot项目打包并运行"><a href="#SpringBoot项目打包并运行" class="headerlink" title="SpringBoot项目打包并运行"></a>SpringBoot项目打包并运行</h1><h2 id="执行Maven构建指令package"><a href="#执行Maven构建指令package" class="headerlink" title="执行Maven构建指令package"></a>执行Maven构建指令package</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/d217da00-98c2-4908-9b25-f1c8e49039c6.png"></p><h2 id="在jar包的目录下启动指令"><a href="#在jar包的目录下启动指令" class="headerlink" title="在jar包的目录下启动指令"></a>在jar包的目录下启动指令</h2><blockquote><p>java -jar [jar文件名]</p></blockquote><p>需要确保打包时具有maven插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h1 id="使用maven依赖管理变更起步依赖"><a href="#使用maven依赖管理变更起步依赖" class="headerlink" title="使用maven依赖管理变更起步依赖"></a>使用maven依赖管理变更起步依赖</h1><blockquote><p>更换tomcat为jetty</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h1><ul><li>application.properties</li><li>application.yml</li></ul><p>配置默认提示信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">warn</span></span><br></pre></td></tr></table></figure><p>现在提示信息只有这么点了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.7.4)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="yaml数据读取方式"><a href="#yaml数据读取方式" class="headerlink" title="yaml数据读取方式"></a>yaml数据读取方式</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">warn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kallen</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">likes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">basketball</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">football</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">swim</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-Value读取单个数据"><a href="#使用-Value读取单个数据" class="headerlink" title="使用@Value读取单个数据"></a>使用@Value读取单个数据</h2><p>属性名引用方式：${一级属性名.二级属性名}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> port;</span><br></pre></td></tr></table></figure><h2 id="封装全部数据到Environment对象"><a href="#封装全部数据到Environment对象" class="headerlink" title="封装全部数据到Environment对象"></a>封装全部数据到Environment对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Environment environment;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(environment.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义对象封装指定数据"><a href="#自定义对象封装指定数据" class="headerlink" title="自定义对象封装指定数据"></a>自定义对象封装指定数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String[] likes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多环境启动"><a href="#多环境启动" class="headerlink" title="多环境启动"></a>多环境启动</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span> <span class="comment">#启动指定环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>上面的是过时格式推荐格式如下，但更麻烦</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h2 id="打包后带参数启动Springboot"><a href="#打包后带参数启动Springboot" class="headerlink" title="打包后带参数启动Springboot"></a>打包后带参数启动Springboot</h2><blockquote><p>java -jar [jar包名] –spring.profile.active=[模式名] –server.port=[端口号]</p></blockquote><h1 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h1><h2 id="选择需要的技术集"><a href="#选择需要的技术集" class="headerlink" title="选择需要的技术集"></a>选择需要的技术集</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/0b85811d-0e47-48a7-8957-738b5a7a1701.png"></p><h2 id="设置数据源参数"><a href="#设置数据源参数" class="headerlink" title="设置数据源参数"></a>设置数据源参数</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/testgeneration</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="定义数据层接口与映射配置"><a href="#定义数据层接口与映射配置" class="headerlink" title="定义数据层接口与映射配置"></a>定义数据层接口与映射配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Select(&quot;select account_id as id,account_name as name,property from account&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束。。<br>相比于spring，简化了一大堆的配置，简直不要太爽，到现在，我才终于体会到springboot的强大之处，之前学习的时候都是直接使用Springboot，没有这样的感受，而且在讲原理的时候有很多地方都感觉莫名其妙，直到看完了spring的各种配置和原理，才真正明白springboot是个什么东西，springboot不过是个简化工具，真正有重量的东西在spring框架上面，这几天也算基本看完了spring的一套东西，可以很明显的感受到编程在一步步的简化，它的趋势是这样的</p><blockquote><p>xml-&gt;部分注解配置-&gt;spring全注解配置-&gt;springboot注解自动配置</p></blockquote><h1 id="SpringBoot-整合mybatisplus（mp）"><a href="#SpringBoot-整合mybatisplus（mp）" class="headerlink" title="SpringBoot 整合mybatisplus（mp）"></a>SpringBoot 整合mybatisplus（mp）</h1><h2 id="手动添加mp起步依赖"><a href="#手动添加mp起步依赖" class="headerlink" title="手动添加mp起步依赖"></a>手动添加mp起步依赖</h2><blockquote><p>mp未被收录到idea的内置配置中</p></blockquote><h2 id="设置jdbc参数"><a href="#设置jdbc参数" class="headerlink" title="设置jdbc参数"></a>设置jdbc参数</h2><blockquote><p>和上面那个案例一样，不解释了</p></blockquote><h2 id="创建domain实体类"><a href="#创建domain实体类" class="headerlink" title="创建domain实体类"></a>创建domain实体类</h2><h2 id="定义数据接口，继承BaseMapper"><a href="#定义数据接口，继承BaseMapper" class="headerlink" title="定义数据接口，继承BaseMapper"></a>定义数据接口，继承BaseMapper<Account></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Account&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完成。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>直接调用方法即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootLearningApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    accounts.forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简化日志"><a href="#简化日志" class="headerlink" title="简化日志"></a>简化日志</h1><p>日志太多干扰正常信息，可以设置简化日志</p><h2 id="设置xml配置文件"><a href="#设置xml配置文件" class="headerlink" title="设置xml配置文件"></a>设置xml配置文件</h2><p>在resources文件夹下新建xml文件并设置一个空的configuration即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="禁用banner"><a href="#禁用banner" class="headerlink" title="禁用banner"></a>禁用banner</h2><p>在springboot的配置类中打出banner即可自动搜索出banner的配置，设置为禁用即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure><p>当然想要自定义banner也从这里入手</p><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><p>其实就是更改代码后快速重启一下服务器方便测试<br>热部署仅仅加载当前开发者自定义开发的资源，不加载jar资源，所以热部署比手动重启要快一些<br>引入依赖即可使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>idea下ctrl+f9激活</p><blockquote><p>idea提供了自动构建项目的功能<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/965e26df-135b-470b-8119-a549ceac79c8.png"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/048cdb7c-65f8-4b77-8c13-b1460d53ffbb.png"><br>这个设置在2021版的idea中被调到了设置里面，上网查了才知道<br>idea失去焦点5秒后会自动热部署 </p></blockquote><ul><li>取消热部署可以在配置文件中设置,devtools.restart.exclude</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot项目打包并运行&quot;&gt;&lt;a href=&quot;#SpringBoot项目打包并运行&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot项目打包并运行&quot;&gt;&lt;/a&gt;SpringBoot项目打包并运行&lt;/h1&gt;&lt;h2 id=&quot;执行Mav</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://kallenblue.github.io/categories/SpringBoot/"/>
    
    
  </entry>
  
  <entry>
    <title>SSM-拦截器</title>
    <link href="https://kallenblue.github.io/2022/10/05/SSM/SSM-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://kallenblue.github.io/2022/10/05/SSM/SSM-%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2022-10-05T14:13:12.000Z</published>
    <updated>2022-10-12T12:31:09.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="声明拦截器的bean，并实现接口"><a href="#声明拦截器的bean，并实现接口" class="headerlink" title="声明拦截器的bean，并实现接口"></a>声明拦截器的bean，并实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">      <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">      ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义配置类，继承WebMvcConfigurationSupport，实现"><a href="#定义配置类，继承WebMvcConfigurationSupport，实现" class="headerlink" title="定义配置类，继承WebMvcConfigurationSupport，实现"></a>定义配置类，继承WebMvcConfigurationSupport，实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ProjectInterceptor interceptor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterceptor</span><span class="params">(ProjectInterceptor interceptor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.interceptor = interceptor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(interceptor).addPathPatterns(<span class="string">&quot;/accounts&quot;</span>,<span class="string">&quot;/accounts/*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="也可以使用标准接口WebMvcConfigurer简化开发，但侵入性较强"><a href="#也可以使用标准接口WebMvcConfigurer简化开发，但侵入性较强" class="headerlink" title="也可以使用标准接口WebMvcConfigurer简化开发，但侵入性较强"></a>也可以使用标准接口WebMvcConfigurer简化开发，但侵入性较强</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.kallen.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ProjectInterceptor interceptor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterceptor</span><span class="params">(ProjectInterceptor interceptor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.interceptor = interceptor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(interceptor).addPathPatterns(<span class="string">&quot;/accounts&quot;</span>,<span class="string">&quot;/accounts/*&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器参数"><a href="#拦截器参数" class="headerlink" title="拦截器参数"></a>拦截器参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;preHandle&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>request:请求对象</li><li>response:响应对象</li><li>handler:被调用的处理器对象，本质上是一个方法对象，对反射技术中的Method对象进行了再包装</li><li>返回值为false，被拦截的处理器将不执行</li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/d2bd3808-92f3-4fed-a0c4-1f9155fa181e.png"></p><h2 id="多拦截器执行顺序"><a href="#多拦截器执行顺序" class="headerlink" title="多拦截器执行顺序"></a>多拦截器执行顺序</h2><ul><li>当配置多个拦截器时，形成拦截器链</li><li>拦截器链的运行顺序参照拦截器添加顺序为准</li><li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li><li>当拦截器运行终端，仅运行配置在前面的拦截器的afterCompletion操作</li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/4baf747d-b6f3-4f90-bfb2-1266c2cf0bba.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;案例&quot;&gt;&lt;a href=&quot;#案例&quot; class=&quot;headerlink&quot; title=&quot;案例&quot;&gt;&lt;/a&gt;案例&lt;/h1&gt;&lt;h2 id=&quot;声明拦截器的bean，并实现接口&quot;&gt;&lt;a href=&quot;#声明拦截器的bean，并实现接口&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="SSM" scheme="https://kallenblue.github.io/categories/SSM/"/>
    
    
  </entry>
  
  <entry>
    <title>SSM-异常处理</title>
    <link href="https://kallenblue.github.io/2022/10/05/SSM/SSM-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://kallenblue.github.io/2022/10/05/SSM/SSM-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-10-05T05:45:15.000Z</published>
    <updated>2022-10-05T15:08:02.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于SSM的整合"><a href="#关于SSM的整合" class="headerlink" title="关于SSM的整合"></a>关于SSM的整合</h1><blockquote><p>SSM即Spring+SpringMVC+Mybatis，各部分的知识点已经在Spring和SpringMVC的模块里面介绍了，所以不再一一记录，我将一份<a href="">模板源码</a>上传到github上，方便项目的启动（ps:已经感受到Spring配置上的繁琐，但也正是有这样的感受才会体验到Springboot的便捷）</p></blockquote><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><ul><li>集中的、统一的处理项目中出现的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">10000</span>,<span class="string">&quot;出现异常&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@ExceptionHandler 标注处理哪一个异常</p></blockquote><h2 id="自定义项目系统级异常"><a href="#自定义项目系统级异常" class="headerlink" title="自定义项目系统级异常"></a>自定义项目系统级异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code,String message)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message);</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message, cause);</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义项目业务级异常"><a href="#自定义项目业务级异常" class="headerlink" title="自定义项目业务级异常"></a>自定义项目业务级异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code,String message)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message);</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code,String message, Throwable cause)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(message, cause);</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常编码"><a href="#自定义异常编码" class="headerlink" title="自定义异常编码"></a>自定义异常编码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SAVE_OK=<span class="number">20011</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DELETE_OK=<span class="number">20021</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer UPDATE_OK=<span class="number">20031</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer GET_OK=<span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SAVE_ERR=<span class="number">20010</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DELETE_ERR=<span class="number">20020</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer UPDATE_ERR=<span class="number">20030</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer GET_ERR=<span class="number">20040</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SYSTEM_UNKNOWN_ERR=<span class="number">50000</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SYSTEM_TIMEOUT_ERR=<span class="number">50001</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer PROJECT_VALIDATE_ERR=<span class="number">50010</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer PROJECT_BUSINESS_ERR=<span class="number">50011</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="触发自定义异常"><a href="#触发自定义异常" class="headerlink" title="触发自定义异常"></a>触发自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.PROJECT_BUSINESS_ERR,<span class="string">&quot;参数不合法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.getById(id);</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> account !=<span class="literal">null</span>?Code.GET_OK:Code.GET_ERR;</span><br><span class="line">  <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> account!=<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:<span class="string">&quot;查询失败&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,account,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截并处理异常"><a href="#拦截并处理异常" class="headerlink" title="拦截并处理异常"></a>拦截并处理异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException e)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(e.getCode(),e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException e)</span>&#123;</span><br><span class="line">    <span class="comment">//记录日志</span></span><br><span class="line">    <span class="comment">//发送邮件给开发人员</span></span><br><span class="line">    <span class="comment">//发送短信给运维人员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(e.getCode(),e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">doException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">    <span class="comment">//记录日志</span></span><br><span class="line">    <span class="comment">//发送邮件给开发人员</span></span><br><span class="line">    <span class="comment">//发送短信给运维人员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOWN_ERR,<span class="string">&quot;出现异常&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于SSM的整合&quot;&gt;&lt;a href=&quot;#关于SSM的整合&quot; class=&quot;headerlink&quot; title=&quot;关于SSM的整合&quot;&gt;&lt;/a&gt;关于SSM的整合&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;SSM即Spring+SpringMVC+Mybatis，各部分的</summary>
      
    
    
    
    <category term="SSM" scheme="https://kallenblue.github.io/categories/SSM/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-REST</title>
    <link href="https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-REST/"/>
    <id>https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-REST/</id>
    <published>2022-10-04T14:37:04.000Z</published>
    <updated>2022-10-04T16:00:06.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h1><ul><li>REST(Representational State Transfer)，表现形式状态转换<ul><li>传统风格资源描述形式<ul><li><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></li><li><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></li></ul></li><li>REST风格<ul><li><a href="http://localhost/user/1">http://localhost/user/1</a></li><li><a href="http://localhost/user">http://localhost/user</a></li></ul></li></ul></li><li>优点：<ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li></ul><h2 id="REST风格简介"><a href="#REST风格简介" class="headerlink" title="REST风格简介"></a>REST风格简介</h2><ul><li><p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作</p><ul><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;查询全部用户信息    GET（查询）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a> 查询指定用户信息    GET（查询）</li><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;添加用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POST（新增/保存）</li><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;修改用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUT（修改/更新）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a>    删除用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DELETE（删除）</li></ul></li><li><p>根据REST风格对资源进行访问称为<strong>RESTful</strong></p></li></ul><h2 id="REST风格案例"><a href="#REST风格案例" class="headerlink" title="REST风格案例"></a>REST风格案例</h2><ul><li>设定http请求动作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设定请求参数（路径变量）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user delete...&quot;</span>+id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestBody @RequestParam @PathVariable<blockquote><p>@RequestParam 用于接收url地址传参或表单传参（非json格式时使用）</p></blockquote></li></ul><blockquote><p>@RequestBody用于接收json数据（应用最广泛）</p></blockquote><blockquote><p>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数（参数较少时使用）</p></blockquote><h1 id="简化REST"><a href="#简化REST" class="headerlink" title="简化REST"></a>简化REST</h1><ul><li>@RestController替代@Controller @ResponseBody<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@GetMapping @PostMapping @PutMapping @DeleteMapping替换普通的@RequestMapping</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  @RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">  <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="补充：对静态页面的放行"><a href="#补充：对静态页面的放行" class="headerlink" title="补充：对静态页面的放行"></a>补充：对静态页面的放行</h1><blockquote><p>新建一个配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;REST简介&quot;&gt;&lt;a href=&quot;#REST简介&quot; class=&quot;headerlink&quot; title=&quot;REST简介&quot;&gt;&lt;/a&gt;REST简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;REST(Representational State Transfer)，表现形式状态转换&lt;u</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
    <category term="REST" scheme="https://kallenblue.github.io/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>备忘录</title>
    <link href="https://kallenblue.github.io/2022/10/04/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://kallenblue.github.io/2022/10/04/%E5%A4%87%E5%BF%98/%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2022-10-04T06:14:21.000Z</published>
    <updated>2022-10-14T13:51:44.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><ul><li>查找类<blockquote><p>ctrl+n</p></blockquote></li><li>查看类的层次结构<blockquote><p>ctrl+h</p></blockquote></li><li>快速实现接口方法<blockquote><p>ctrl+i</p></blockquote></li><li>查看当前类的方法<blockquote><p>ctrl+F12</p></blockquote></li><li>返回上一次查看代码的位置<blockquote><p>ctrl+alt+←</p></blockquote><h1 id="windows命令行"><a href="#windows命令行" class="headerlink" title="windows命令行"></a>windows命令行</h1></li><li>列出所有端口的情况<blockquote><p>netstat -ano</p></blockquote></li><li>查看被占用端口对应的PID<blockquote><p>netstat -aon|findstr “8848”</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea&quot;&gt;&lt;/a&gt;idea&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;查找类&lt;blockquote&gt;
&lt;p&gt;ctrl+n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;查看</summary>
      
    
    
    
    <category term="备忘" scheme="https://kallenblue.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-请求与响应</title>
    <link href="https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/"/>
    <id>https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</id>
    <published>2022-10-04T03:46:08.000Z</published>
    <updated>2022-10-04T06:19:41.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><h2 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h2><ul><li>@RequestMapping</li><li>设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;delete save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get和post请求"><a href="#get和post请求" class="headerlink" title="get和post请求"></a>get和post请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+name);</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+age);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>get和post通用</p></blockquote><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><ul><li>为web容器添加过滤器并指定字符集，Spring-web包中提供了专用的字符过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span></span><br><span class="line">    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>仅作用于post方法，但是好像新版的tomcat已经自动解决了get方法</p></blockquote><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h3><blockquote><p>上一栏已经演示，不再赘述，加一点：如果请求参数名与形参变量名不同，使用@RequestParam绑定参数关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+username);</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+age);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJO参数"><a href="#POJO参数" class="headerlink" title="POJO参数"></a>POJO参数</h3><blockquote><p>请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+user.getName());</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+user.getAge());</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套POJO参数"><a href="#嵌套POJO参数" class="headerlink" title="嵌套POJO参数"></a>嵌套POJO参数</h3><blockquote><p>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String province;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/1270566a-30bf-4d1a-b533-fdeac7737d84.png"></p><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><blockquote><p>请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/26e8451f-78ed-4c2f-b293-5c56eb58a3de.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合保存普通参数"><a href="#集合保存普通参数" class="headerlink" title="集合保存普通参数"></a>集合保存普通参数</h3><blockquote><p>请求参数名与形参对象属性名相同且请求参数为多个，@RequestParam绑定参数关系</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/26e8451f-78ed-4c2f-b293-5c56eb58a3de.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json数据传递"><a href="#json数据传递" class="headerlink" title="json数据传递"></a>json数据传递</h3><ul><li>添加json数据转换相关坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启自动转换json数据的支持@EnableWebMvc<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.kallen.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnableWebMvc开启SpringMVC多项辅助功能</p></blockquote></li></ul><blockquote><p>@EnableWebMvc注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能，即json数据进行自动类型转换</p></blockquote><ul><li>设置接收json数据@RequestBody</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestBody</span> String[] likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestBody与-RequestParam区别"><a href="#RequestBody与-RequestParam区别" class="headerlink" title="@RequestBody与@RequestParam区别"></a>@RequestBody与@RequestParam区别</h4><ul><li>区别<ul><li>@RequestParam用于接收url地址传参</li><li>@RequestBody用于接收json数据</li></ul></li><li>应用<ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li></ul></li></ul><h3 id="日期型参数传递"><a href="#日期型参数传递" class="headerlink" title="日期型参数传递"></a>日期型参数传递</h3><ul><li>日期型数据基于系统不同格式也不尽相同<ul><li>2088-08-18</li><li>2088/08/18</li><li>08/18/2088</li></ul></li><li>接收形参时，根据不同的日期格式设置不同观点接收方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Date date1,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MMM-dd&quot;)</span> Date date2,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date3)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;date1--&gt;&quot;</span>+date1);</span><br><span class="line">  System.out.println(<span class="string">&quot;date2--&gt;&quot;</span>+date2);</span><br><span class="line">  System.out.println(<span class="string">&quot;date3--&gt;&quot;</span>+date3);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@DateTimeFormat设定日期时间型数据格式</p></blockquote><blockquote><p>@EnableWebMvc功能之一：根据类型匹配对应的类型转换器</p></blockquote><h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><ul><li>@ResponseBody：设置当前控制器返回值作为响应体<blockquote><p>返回为json数据依赖于</p></blockquote></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user--&gt;&quot;</span>+user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>响应结果</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/4a473cb9-c785-48c2-9401-5b6c0f31943f.png"></p><blockquote><p>转换依靠HttpMessageConverter接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">T <span class="title function_">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T t, <span class="meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;请求&quot;&gt;&lt;a href=&quot;#请求&quot; class=&quot;headerlink&quot; title=&quot;请求&quot;&gt;&lt;/a&gt;请求&lt;/h1&gt;&lt;h2 id=&quot;请求映射路径&quot;&gt;&lt;a href=&quot;#请求映射路径&quot; class=&quot;headerlink&quot; title=&quot;请求映射路径&quot;&gt;&lt;/a&gt;请</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-启动一个SpringMVC项目</title>
    <link href="https://kallenblue.github.io/2022/10/03/SpringMVC/SpringMVC-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AASpringMVC%E9%A1%B9%E7%9B%AE/"/>
    <id>https://kallenblue.github.io/2022/10/03/SpringMVC/SpringMVC-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AASpringMVC%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-10-03T13:10:26.000Z</published>
    <updated>2022-10-04T04:06:22.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h1><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</li></ul><h1 id="SpringMVC项目启动"><a href="#SpringMVC项目启动" class="headerlink" title="SpringMVC项目启动"></a>SpringMVC项目启动</h1><h2 id="导入SpringMVC坐标与Servlet坐标以及tomcat插件"><a href="#导入SpringMVC坐标与Servlet坐标以及tomcat插件" class="headerlink" title="导入SpringMVC坐标与Servlet坐标以及tomcat插件"></a>导入SpringMVC坐标与Servlet坐标以及tomcat插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建SpringMVC控制器类"><a href="#创建SpringMVC控制器类" class="headerlink" title="创建SpringMVC控制器类"></a>创建SpringMVC控制器类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ResponseBody 用于设置当前控制器方法响应内容为当前返回值，无需解析<h2 id="初始化SpringMVC环境，设定SpringMVC加载对应的bean"><a href="#初始化SpringMVC环境，设定SpringMVC加载对应的bean" class="headerlink" title="初始化SpringMVC环境，设定SpringMVC加载对应的bean"></a>初始化SpringMVC环境，设定SpringMVC加载对应的bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.kallen.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求"><a href="#初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求" class="headerlink" title="初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求"></a>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化web3.0容器的抽象类</li><li>AbstractDispatcherServletInitializer提供三个接口方法供用户实现<ul><li>createServletApplicationContext()方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个web容器范围</li><li>getServletMappings()方法，设定SpringMVC对应的请求映射路径，设置为/表示拦截所有请求，任意请求都将转入到SpringMVC进行处理</li><li>createRootApplicationContext()方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当点方法进行，使用方式同createServletApplicationContext()</li></ul></li></ul><h1 id="SpringMVC工作流程分析"><a href="#SpringMVC工作流程分析" class="headerlink" title="SpringMVC工作流程分析"></a>SpringMVC工作流程分析</h1><ul><li><p><strong>启动服务器初始化过程</strong></p><ul><li>服务器启动，执行ServletContainersInitConfig类，初始化web容器</li><li>执行createServletApplicationContext()方法，创建了WebApplicationContext对象</li><li>加载SpringMvcConfig</li><li>执行@ComponentScan加载对应的bean</li><li>加载UserController，每个@RequestMapping的名称对应一个具体的方法</li><li>执行getServletMappings方法，定义所有的请求都通过SpringMVC</li></ul></li><li><p>单次请求过程</p><ul><li>发送请求localhost/save</li><li>web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</li><li>解析请求路径/save</li><li>由/save匹配执行对应的方法save()</li><li>执行save()</li><li>检测到有@ResponseBody直接将sava()方法的返回值作为响应请求体返回给请求方</li></ul></li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/deda0682-f56c-469f-bdbd-c9bb46b2110a.png"></p><h1 id="Controller加载控制与业务bean加载控制"><a href="#Controller加载控制与业务bean加载控制" class="headerlink" title="Controller加载控制与业务bean加载控制"></a>Controller加载控制与业务bean加载控制</h1><ul><li>Spring容器和SpringMVC容器的bean需要分开加载<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.kallen&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>excludeFilters:排除扫描路径中加载的bean，需要指定类别（type）与具体项（classes）</p></blockquote></li></ul><blockquote><p>includeFilters：加载指定的bean，需要指定类别（type）与具体项（classes）</p></blockquote><ul><li><p>bean的加载格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化开发</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span></span><br><span class="line">    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/a&gt;SpringMVC概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SpringMVC是一种基于Java实现MVC模型的轻量</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-事务管理</title>
    <link href="https://kallenblue.github.io/2022/10/02/Spring/Spring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>https://kallenblue.github.io/2022/10/02/Spring/Spring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2022-10-02T12:47:53.000Z</published>
    <updated>2022-10-03T12:22:27.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h1><ul><li><p>事务作用：在数据层保障一系列的数据库操作同成功同失败</p><blockquote><p>通过平台事务管理器来保障</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务案例：模拟银行账户间转账业务"><a href="#事务案例：模拟银行账户间转账业务" class="headerlink" title="事务案例：模拟银行账户间转账业务"></a>事务案例：模拟银行账户间转账业务</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><blockquote><p>实现两个账户之间转账操作，A账户转钱，B账户加钱</p></blockquote></li><li><p>数据层提供基础操作，指定账户转钱（outMoney），指定账户加钱（inMoney）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update account set property=property + #&#123;money&#125; where account_id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update account set property=property-#&#123;money&#125; where account_id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br></pre></td></tr></table></figure></li><li><p>业务层提供转账操作（transferAccounts），调用转钱和加钱的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供两个账号和操作金额执行转账操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountApp</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">    accountService.transferAccounts(<span class="number">1</span>,<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>程序正常执行时，转账正常</li><li>程序出现异常后，转账失败，但是异常之前的操作成功，异常之后的操作失败，整体业务失败，也就是会出现只转出了钱没收到钱或者只收到没转出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="Spring的事务管理"><a href="#Spring的事务管理" class="headerlink" title="Spring的事务管理"></a>Spring的事务管理</h2></li><li>在业务层接口上添加Spring事务管理@Transactional</li></ul><blockquote><p>Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合<br>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口类上表示当前接口所有方法开启事务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID,<span class="type">int</span> toID,<span class="type">double</span> money)</span>;</span><br></pre></td></tr></table></figure><ul><li>设置事务管理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">  <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">  transactionManager.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事务管理器要根据实现技术进行选择<br>MyBatis框架使用的是JDBC事务</p></blockquote><ul><li>开启注解式事务驱动</li></ul><blockquote><p>在配置类中添加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure><h1 id="Spring事务角色"><a href="#Spring事务角色" class="headerlink" title="Spring事务角色"></a>Spring事务角色</h1><ul><li>事务角色<ul><li>事务管理员：发起事务方：在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul></li></ul><h1 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置"></a>事务配置</h1><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/f5098949-b030-4df9-8a56-b64bc36ef067.png"></p><blockquote><p>默认error和运行时异常会进行回滚，其他情况不回滚</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里抛出的异常为IOException，默认不会回滚</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID,<span class="type">int</span> toID,<span class="type">double</span> money)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><blockquote><p>加上配置即可</p></blockquote><h1 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h1><blockquote><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>和之前那个转账的案例一样，不过这次要求无论转账是否成功均需转账操作的日志</p></blockquote><ul><li>新建一个log表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="built_in">log</span></span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    log  <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="type">time</span> <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>LogDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">  <span class="meta">@Update(&quot;insert into log (log, time) values (#&#123;log&#125;,now())&quot;)</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(String log)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LogService<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">  <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">double</span> money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为使Log事务成为一个全新的事务，需要在@Transactional里配置propagation = Propagation.REQUIRES_NEW</p></blockquote></li></ul><p>其他属性值如下<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/79b10695-0b70-4e85-8f0b-932a4f12c472.png"></p><ul><li>Service实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> LogDao logDao;</span><br><span class="line">  <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogDao</span><span class="params">(LogDao logDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logDao = logDao;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">fromAccount</span> <span class="operator">=</span> accountDao.selectByID(from);</span><br><span class="line">    <span class="type">Account</span> <span class="variable">toAccount</span> <span class="operator">=</span> accountDao.selectByID(to);</span><br><span class="line">    <span class="keyword">return</span> logDao.addLog(<span class="string">&quot;转账操作由&quot;</span>+fromAccount.getAccountName()+<span class="string">&quot;到&quot;</span>+toAccount.getAccountName()+<span class="string">&quot;,金额:&quot;</span>+money);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务简介&quot;&gt;&lt;a href=&quot;#事务简介&quot; class=&quot;headerlink&quot; title=&quot;事务简介&quot;&gt;&lt;/a&gt;事务简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;事务作用：在数据层保障一系列的数据库操作同成功同失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过平台事务</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="https://kallenblue.github.io/2022/10/01/Spring/Spring-AOP/"/>
    <id>https://kallenblue.github.io/2022/10/01/Spring/Spring-AOP/</id>
    <published>2022-10-01T03:25:28.000Z</published>
    <updated>2022-10-02T09:08:00.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记源自<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">黑马程序员2022新版SSM框架教程</a></p></blockquote><h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构</p></blockquote><blockquote><p>作用：在不惊动原始设计的基础上为其功能进行增强</p></blockquote><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>连接点(JoinPoint)：程序执行过程中的任意位置，粒度为 执行方法、抛出异常、设置变量等</p></blockquote><ul><li>在SpringAOP中理解为方法的执行</li></ul><blockquote><p>切入点(Pointcut)：匹配连接点的式子</p></blockquote><ul><li>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法</li></ul><blockquote><p>通知(Advice)：在切入点执行的操作，也就是共性功能</p></blockquote><ul><li>在SpringAOP中，功能最终以方法的形式呈现 </li></ul><blockquote><p>通知类：定义通知的类</p></blockquote><blockquote><p>切面(Aspect)：描述通知与切入点的对应关系</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/caf3c091-3359-4f28-a258-f6ff4389ff00.png"></p><h1 id="AOP入门实例"><a href="#AOP入门实例" class="headerlink" title="AOP入门实例"></a>AOP入门实例</h1><h2 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut(&quot;execution(void com.Learning2.service.UserService.test())&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;测试。。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(void com.Learning2.service.UserService.test())&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>定义通知类受Spring容器管理，并定义当前类为切片类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br></pre></td></tr></table></figure><blockquote><p>开启Spring对AOP注解驱动的支持</p></blockquote><p>在SpringConfig类中加上@EnableAspectJAutoProxy注解</p><h1 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul><li><strong>1.Spring容器启动</strong></li><li><strong>2.读取所有切面配置中的切入点</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br></pre></td></tr></table></figure></li><li><strong>3.初始化Bean，判定Bean对应的类中的方法是否匹配到任意切入点</strong><ul><li>匹配失败，创建对象</li><li>匹配成功，创建原始对象（目标对象）的代理对象</li></ul></li><li><strong>4.获取Bean执行方法</strong><ul><li>获取Bean，调用方法并执行，完成操作</li><li>获取的Bean是代理对象，根据代理对象的运行模式运行原始方法以及增强内容，完成操作</li></ul></li></ul><h2 id="核心概念-1"><a href="#核心概念-1" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li><p><strong>目标对象(Target)</strong></p><blockquote><p>原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</p></blockquote></li><li><p><strong>代理(Proxy)</strong></p><blockquote><p>目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</p></blockquote><h2 id="SpringAOP本质"><a href="#SpringAOP本质" class="headerlink" title="SpringAOP本质"></a>SpringAOP本质</h2></li><li><p><strong>代理模式</strong></p><h1 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h1></li><li><p><strong>切入点：要进行增强的方法</strong></p></li><li><p><strong>切入点表达式：要进行增强的方法的描述方式</strong></p></li></ul><h2 id="切入点表达式的标准格式"><a href="#切入点表达式的标准格式" class="headerlink" title="切入点表达式的标准格式"></a>切入点表达式的标准格式</h2><p><strong>动作关键字(访问修饰符 返回值 包名.类/接口名.方法名(参数) 异常名)</strong></p><ul><li><p><strong>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</strong></p></li><li><p><strong>访问修饰符：public，private等，默认public</strong></p></li><li><p><strong>返回值</strong></p></li><li><p><strong>包名</strong></p></li><li><p><strong>类/接口名</strong></p></li><li><p><strong>方法名</strong></p></li><li><p><strong>参数</strong></p></li><li><p><strong>异常名：方法定义中抛出指定异常，可以省略</strong></p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><blockquote><p>可以使用通配符描述切入点，快速描述</p></blockquote></li><li><p><strong>*：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的通配符出现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * com.Learning2.*.UserService.find*(*))</span><br></pre></td></tr></table></figure><blockquote><p>匹配com.Learning2包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></blockquote></li><li><p><strong>..：多个连续的任意符号，可以单独出现，常用于简化包名和参数的书写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User com..UserService.findByID(..))</span><br></pre></td></tr></table></figure><blockquote><p>匹配com包下的任意包中的UserService类或接口中所有名称为findByID的方法</p></blockquote></li><li><p><strong>+：专用于匹配子类类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><h2 id="书写技巧"><a href="#书写技巧" class="headerlink" title="书写技巧"></a>书写技巧</h2></li><li><p>所有代码按照标准格式开发，否则以下技巧全部失效</p></li><li><p>描述切入点通常<strong>描述接口</strong>，而不描述实现类</p></li><li><p>访问控制修饰符针对接口开发均采用public描述(<strong>可省略访问控制修饰符描述</strong>)</p></li><li><p>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*统配快速描述</p></li><li><p><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用*做单个包描述匹配，或精准匹配</p></li><li><p><strong>接口名/类名</strong>书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</p></li><li><p><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>，名词采用*匹配，例如getByID书写成getBy*，selectAll书写成selectAll</p></li><li><p>参数规则较为复杂，根据业务方法灵活调整</p></li><li><p>通常<strong>不使用异常</strong>作为<strong>匹配</strong>规则</p></li></ul><h1 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h1><ul><li><strong>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</strong></li><li><strong>AOP通知共分为5种类型</strong><ul><li>前置通知</li><li>后置通知</li><li>环绕通知（重点）</li><li>返回后通知（了解）</li><li>抛出异常后通知（了解）</li></ul></li></ul><h2 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h2><ul><li>名称：@Before</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法前运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行前&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h2><ul><li>名称：@After</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2></li><li>名称：@Around</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法前后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行前&quot;</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  System.out.println(<span class="string">&quot;运行后&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@Around注意事项<ul><li>1.环绕通知必须依赖参数ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>2.通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>3.对原始方法的调用可以不接受返回值，通知方法设置成void即可，如果接受返回值，必须设定为Object类型</li><li>4.原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</li><li>5.由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li></ul></li></ul><h2 id="返回后通知（了解）"><a href="#返回后通知（了解）" class="headerlink" title="返回后通知（了解）"></a>返回后通知（了解）</h2><ul><li>名称：@After</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在正常执行完毕后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行完毕后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="抛出异常后通知（了解）"><a href="#抛出异常后通知（了解）" class="headerlink" title="抛出异常后通知（了解）"></a>抛出异常后通知（了解）</h2><ul><li>名称：@AfterThrowing</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行抛出异常后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="案例测试"><a href="#案例测试" class="headerlink" title="案例测试"></a>案例测试</h2><blockquote><p>测试Service类中的方法的运行时间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//service包下的所有以Service为后缀的类的所有方法</span></span><br><span class="line">  <span class="meta">@Pointcut(&quot;execution(* com.Learning2.service.*Service.*(..))&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    <span class="comment">//代表了一次执行的签名信息，封装了这一次的执行过程</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;执行时间：&quot;</span>+className+<span class="string">&quot;.&quot;</span>+method+<span class="string">&quot;----&gt;&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br><span class="line"></span><br><span class="line">    userService.test();</span><br><span class="line">    userService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">This is Service</span><br><span class="line">执行时间：com.Learning2.service.UserService.test----&gt;0ms</span><br><span class="line">十月 02, 2022 3:56:30 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">执行时间：com.Learning2.service.UserService.findAll----&gt;2397ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h1><h2 id="获取切入点方法的参数"><a href="#获取切入点方法的参数" class="headerlink" title="获取切入点方法的参数"></a>获取切入点方法的参数</h2><ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul><blockquote><p>JoinPoint对象描述了连接点方法的运行状态，可以获取到原始方法的调用参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line">  Object[] args = jp.getArgs();</span><br><span class="line">  System.out.println(Arrays.toString(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ProceedingJoinPoint是JoinPoint的子类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  Object[] args = pjp.getArgs();</span><br><span class="line">  System.out.println(Arrays.toString(args));</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取切入点方法返回值"><a href="#获取切入点方法返回值" class="headerlink" title="获取切入点方法返回值"></a>获取切入点方法返回值</h2><ul><li>返回后通知</li><li>环绕通知 <blockquote><p>返回后通知可以获取切入点方法中的返回信息，使用形参可以接受对应的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pointCut()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;afterReturning ...&quot;</span>+ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取切入点方法运行异常信息"><a href="#获取切入点方法运行异常信息" class="headerlink" title="获取切入点方法运行异常信息"></a>获取切入点方法运行异常信息</h2></li><li>抛出异常后通知</li><li>环绕通知<blockquote><p>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接受对应的异常对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;,throwing = &quot;throwable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>+throwable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在环绕通知中可以直接用try catch来接收异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ret = pjp.proceed();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笔记源自&lt;a href=&quot;https://www.bilibili.com/video/BV1Fi4y1S7ix&quot;&gt;黑马程序员2022新版SSM框架教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;AOP简介&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
    <category term="AOP" scheme="https://kallenblue.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring-整合</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%95%B4%E5%90%88/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%95%B4%E5%90%88/</id>
    <published>2022-09-29T15:39:54.000Z</published>
    <updated>2022-10-01T14:55:02.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><h2 id="加载properties文件-XML"><a href="#加载properties文件-XML" class="headerlink" title="加载properties文件(XML)"></a>加载properties文件(XML)</h2><h3 id="1-开启context命名空间"><a href="#1-开启context命名空间" class="headerlink" title="1.开启context命名空间"></a>1.开启context命名空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用contxt命名空间加载指定properties文件"><a href="#2-使用contxt命名空间加载指定properties文件" class="headerlink" title="2.使用contxt命名空间加载指定properties文件"></a>2.使用contxt命名空间加载指定properties文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加载格式"><a href="#加载格式" class="headerlink" title="加载格式"></a>加载格式</h4><blockquote><p>不加载系统属性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载多个properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,msg.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载所有properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载所有properties文件<strong>标准格式</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从类路径或jar包中搜索并加载properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载properties文件-注解"><a href="#加载properties文件-注解" class="headerlink" title="加载properties文件(注解)"></a>加载properties文件(注解)</h2><p>注解开发只需要在配置类中添加注解@PropertySource(“classpath:jdbc.properties”)扫描包即可</p><blockquote><p>引用方式如下</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String driver;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.userName&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Mybatis配置类"><a href="#配置Mybatis配置类" class="headerlink" title="配置Mybatis配置类"></a>配置Mybatis配置类</h2><p>在没有用Spring之前使用mybatis的方式是需要两个步骤的<br>1.写一个配置文件<strong>mybatis-config.xml</strong><br>2.每次使用的时候调用SqlSessionFactory创建sqlSession对象然后再通过sqlSession获取对应的Mapper<br>在使用Spring之后，以上步骤全部简化为一个配置类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//设置别名</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.version2.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">//environments:配置数据库连接环境信息，可以配置多个environment。通过default属性切换不同的environment</span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            //数据库连接信息</span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">  <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">  sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.Learning2.domain&quot;</span>);</span><br><span class="line">  sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mapper代理方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.version2.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">  mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.Learning2.dao&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Service里面即可直接获取Dao的代理对象进行数据库的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userDao.save(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">findByAccount</span><span class="params">(String account)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findByAccount(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合JUnit"><a href="#整合JUnit" class="headerlink" title="整合JUnit"></a>整合JUnit</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAccountTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(userService.findByAccount(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整合Mybatis&quot;&gt;&lt;a href=&quot;#整合Mybatis&quot; class=&quot;headerlink&quot; title=&quot;整合Mybatis&quot;&gt;&lt;/a&gt;整合Mybatis&lt;/h1&gt;&lt;h2 id=&quot;加载properties文件-XML&quot;&gt;&lt;a href=&quot;#加载prope</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring/注解开发</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2022-09-29T13:30:36.000Z</published>
    <updated>2022-10-02T08:47:40.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="注解开发定义Bean"><a href="#注解开发定义Bean" class="headerlink" title="注解开发定义Bean"></a>注解开发定义Bean</h2><p>一般的注解为 <strong>@Component</strong><br>附有三个衍生注解<br><strong>@Controller</strong>：用于表现层Bean定义<br><strong>@Service</strong>：用于业务层Bean定义<br><strong>@Repository</strong>：用于数据层Bean定义</p><h2 id="注解开发管理第三方Bean"><a href="#注解开发管理第三方Bean" class="headerlink" title="注解开发管理第三方Bean"></a>注解开发管理第三方Bean</h2><blockquote><p>在另一个类中编写返回值为第三方类的对象的方法，并添加@Bean注解</p></blockquote><p>在另一个类中编写是为了和配置类分开，避免将来Bean多了之后，配置类混乱的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">    ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    ds.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用@Import注解手动加入配置类到核心配置，多个数据用数组格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解开发为第三方Bean注入资源"><a href="#注解开发为第三方Bean注入资源" class="headerlink" title="注解开发为第三方Bean注入资源"></a>注解开发为第三方Bean注入资源</h2><h3 id="简单类型依赖注入"><a href="#简单类型依赖注入" class="headerlink" title="简单类型依赖注入"></a>简单类型依赖注入</h3><blockquote><p>直接在变量里加上@Value注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Value(&quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String driver;</span><br><span class="line">  <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line">  <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="meta">@Value(&quot;1234&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型注入"><a href="#引用类型注入" class="headerlink" title="引用类型注入"></a>引用类型注入</h3><blockquote><p>只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象</p></blockquote><p>注册为容器中的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Service test&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ComponentScan扫描路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Learning1.service&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动装配对象service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(Service service)</span>&#123;</span><br><span class="line">  System.out.println(service);</span><br><span class="line">  <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">  ds.setDriverClassName(driver);</span><br><span class="line">  ds.setUrl(url);</span><br><span class="line">  ds.setUsername(userName);</span><br><span class="line">  ds.setPassword(password);</span><br><span class="line">  <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解开发&quot;&gt;&lt;a href=&quot;#注解开发&quot; class=&quot;headerlink&quot; title=&quot;注解开发&quot;&gt;&lt;/a&gt;注解开发&lt;/h1&gt;&lt;h2 id=&quot;注解开发定义Bean&quot;&gt;&lt;a href=&quot;#注解开发定义Bean&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring/Bean的参数注入</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-Bean%E7%9A%84%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-Bean%E7%9A%84%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/</id>
    <published>2022-09-29T04:08:40.000Z</published>
    <updated>2022-09-29T15:22:42.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记源自<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">黑马程序员2022新版SSM框架教程</a></p></blockquote><h1 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h1><p>需要提供set方法</p><h2 id="1-引用注入"><a href="#1-引用注入" class="headerlink" title="1.引用注入"></a>1.引用注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(TestDao dao)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.dao = dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao2</span><span class="params">(Test2Dao dao2)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.dao2=dao2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name指引用属性的名称，ref指id名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解使用@Autowired</p></blockquote><h2 id="2-简单类型注入"><a href="#2-简单类型注入" class="headerlink" title="2.简单类型注入"></a>2.简单类型注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2DaoImpl</span> <span class="keyword">implements</span> <span class="title class_">Test2Dao</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of Test2Dao&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVal</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;val&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解使用@Value</p></blockquote><h1 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h1><h2 id="1-引用类型"><a href="#1-引用类型" class="headerlink" title="1.引用类型"></a>1.引用类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TestDao dao;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TestServiceImpl</span><span class="params">(TestDao dao)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.dao=dao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name指引用属性的名称，ref指id名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-简单类型注入-1"><a href="#2-简单类型注入-1" class="headerlink" title="2.简单类型注入"></a>2.简单类型注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test2DaoImpl</span><span class="params">(<span class="type">int</span> val, String str)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.str = str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="name绑定"><a href="#name绑定" class="headerlink" title="name绑定"></a>name绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;val&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="type绑定"><a href="#type绑定" class="headerlink" title="type绑定"></a>type绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index绑定"><a href="#index绑定" class="headerlink" title="index绑定"></a>index绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笔记源自&lt;a href=&quot;https://www.bilibili.com/video/BV1Fi4y1S7ix&quot;&gt;黑马程序员2022新版SSM框架教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;setter注入&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
    <category term="Bean" scheme="https://kallenblue.github.io/tags/Bean/"/>
    
  </entry>
  
</feed>
